{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7","program":"C:\\Users\\falik\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","dxgi","C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=087266151b8d9839","-C","extra-filename=-087266151b8d9839","--out-dir","c:\\Users\\falik\\Documents\\School\\21S\\CS 4390 Networks\\project\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\falik\\Documents\\School\\21S\\CS 4390 Networks\\project\\target\\rls\\debug\\deps","--extern","boolinator=c:\\Users\\falik\\Documents\\School\\21S\\CS 4390 Networks\\project\\target\\rls\\debug\\deps\\libboolinator-70a547444e350b98.rmeta","--extern","num=c:\\Users\\falik\\Documents\\School\\21S\\CS 4390 Networks\\project\\target\\rls\\debug\\deps\\libnum-7f7bf5b48738819c.rmeta","--extern","winapi=c:\\Users\\falik\\Documents\\School\\21S\\CS 4390 Networks\\project\\target\\rls\\debug\\deps\\libwinapi-3cefac11a9e5348a.rmeta","--extern","wio=c:\\Users\\falik\\Documents\\School\\21S\\CS 4390 Networks\\project\\target\\rls\\debug\\deps\\libwio-c06314f2140e321d.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\falik\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\falik\\Documents\\School\\21S\\CS 4390 Networks\\project\\target\\rls\\debug\\deps\\libdxgi-087266151b8d9839.rmeta"},"prelude":{"crate_id":{"name":"dxgi","disambiguator":[5796421003694365902,12078316075310694870]},"crate_root":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src","external_crates":[{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[45344308337484766,904807583985397655]}},{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[17608585110195136257,12532935013018738971]}},{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[10644633998059158352,10345665241509147306]}},{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[18212625787733517551,4937265065110821766]}},{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[2699922135837212616,11588109643627721037]}},{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[16653465091603201180,18239440457404116996]}},{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[3073254730555026972,7758270140448631200]}},{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[13759999943095835806,4978516890064261122]}},{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[4575299228079760236,9361028770882531394]}},{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[10307147502021998988,15592389341950453369]}},{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[2670035867216739096,10315597156951015330]}},{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\lib.rs","num":12,"id":{"name":"panic_unwind","disambiguator":[7309248630993686720,3186694738066578297]}},{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\lib.rs","num":13,"id":{"name":"boolinator","disambiguator":[15619876857987031468,12713064706430390029]}},{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\lib.rs","num":14,"id":{"name":"num","disambiguator":[16449106772136727276,8714737892039526146]}},{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\lib.rs","num":15,"id":{"name":"num_traits","disambiguator":[5443521804087415859,5341698614406696940]}},{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\lib.rs","num":16,"id":{"name":"num_integer","disambiguator":[760021960672578467,18272834621284403616]}},{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\lib.rs","num":17,"id":{"name":"num_iter","disambiguator":[11784403071465223583,15664056263291560807]}},{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\lib.rs","num":18,"id":{"name":"num_complex","disambiguator":[12622789657156872385,12768798743709718908]}},{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\lib.rs","num":19,"id":{"name":"rustc_serialize","disambiguator":[3463001959829123066,15596861744095192931]}},{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\lib.rs","num":20,"id":{"name":"num_bigint","disambiguator":[10231434981580158682,767085016793314526]}},{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\lib.rs","num":21,"id":{"name":"rand","disambiguator":[525969658334494803,15100186848041668778]}},{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\lib.rs","num":22,"id":{"name":"winapi","disambiguator":[2443334114920443930,3236215031580195971]}},{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\lib.rs","num":23,"id":{"name":"num_rational","disambiguator":[1456371405128637354,18074201209667908186]}},{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\lib.rs","num":24,"id":{"name":"wio","disambiguator":[14899165245836841888,8606327060688362677]}}],"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\lib.rs","byte_start":0,"byte_end":574,"line_start":1,"line_end":25,"column_start":1,"column_end":20}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":481},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\lib.rs","byte_start":118,"byte_end":125,"line_start":8,"line_end":8,"column_start":18,"column_end":25},"alias_span":null,"name":"Adapter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":503},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\lib.rs","byte_start":143,"byte_end":149,"line_start":9,"line_end":9,"column_start":17,"column_end":23},"alias_span":null,"name":"Device","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":511},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\lib.rs","byte_start":166,"byte_end":171,"line_start":10,"line_end":10,"column_start":16,"column_end":21},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":512},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\lib.rs","byte_start":166,"byte_end":171,"line_start":10,"line_end":10,"column_start":16,"column_end":21},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":527},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\lib.rs","byte_start":190,"byte_end":197,"line_start":11,"line_end":11,"column_start":18,"column_end":25},"alias_span":null,"name":"Factory","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":546},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\lib.rs","byte_start":215,"byte_end":224,"line_start":12,"line_end":12,"column_start":17,"column_end":26},"alias_span":null,"name":"AlphaMode","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":579},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\lib.rs","byte_start":226,"byte_end":232,"line_start":12,"line_end":12,"column_start":28,"column_end":34},"alias_span":null,"name":"Format","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":957},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\lib.rs","byte_start":234,"byte_end":246,"line_start":12,"line_end":12,"column_start":36,"column_end":48},"alias_span":null,"name":"ModeRotation","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":993},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\lib.rs","byte_start":248,"byte_end":259,"line_start":12,"line_end":12,"column_start":50,"column_end":61},"alias_span":null,"name":"ModeScaling","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1023},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\lib.rs","byte_start":261,"byte_end":278,"line_start":12,"line_end":12,"column_start":63,"column_end":80},"alias_span":null,"name":"ModeScanlineOrder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1089},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\lib.rs","byte_start":280,"byte_end":292,"line_start":12,"line_end":12,"column_start":82,"column_end":94},"alias_span":null,"name":"PresentFlags","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1090},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\lib.rs","byte_start":280,"byte_end":292,"line_start":12,"line_end":12,"column_start":82,"column_end":94},"alias_span":null,"name":"PresentFlags","value":"","parent":{"krate":0,"index":17}},{"kind":"Use","ref_id":{"krate":0,"index":1107},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\lib.rs","byte_start":310,"byte_end":317,"line_start":13,"line_end":13,"column_start":17,"column_end":24},"alias_span":null,"name":"Scaling","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1172},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\lib.rs","byte_start":319,"byte_end":333,"line_start":13,"line_end":13,"column_start":26,"column_end":40},"alias_span":null,"name":"SwapChainFlags","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1173},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\lib.rs","byte_start":319,"byte_end":333,"line_start":13,"line_end":13,"column_start":26,"column_end":40},"alias_span":null,"name":"SwapChainFlags","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":1190},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\lib.rs","byte_start":335,"byte_end":345,"line_start":13,"line_end":13,"column_start":42,"column_end":52},"alias_span":null,"name":"SwapEffect","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1254},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\lib.rs","byte_start":347,"byte_end":357,"line_start":13,"line_end":13,"column_start":54,"column_end":64},"alias_span":null,"name":"UsageFlags","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1255},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\lib.rs","byte_start":347,"byte_end":357,"line_start":13,"line_end":13,"column_start":54,"column_end":64},"alias_span":null,"name":"UsageFlags","value":"","parent":{"krate":0,"index":21}},{"kind":"Use","ref_id":{"krate":0,"index":1270},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\lib.rs","byte_start":376,"byte_end":382,"line_start":14,"line_end":14,"column_start":17,"column_end":23},"alias_span":null,"name":"Output","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1313},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\lib.rs","byte_start":401,"byte_end":408,"line_start":15,"line_end":15,"column_start":18,"column_end":25},"alias_span":null,"name":"Surface","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1326},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\lib.rs","byte_start":430,"byte_end":439,"line_start":16,"line_end":16,"column_start":21,"column_end":30},"alias_span":null,"name":"SwapChain","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":546},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\mod.rs","byte_start":15340,"byte_end":15349,"line_start":123,"line_end":123,"column_start":28,"column_end":37},"alias_span":null,"name":"AlphaMode","value":"","parent":{"krate":0,"index":162}},{"kind":"Use","ref_id":{"krate":0,"index":579},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\mod.rs","byte_start":15374,"byte_end":15380,"line_start":124,"line_end":124,"column_start":24,"column_end":30},"alias_span":null,"name":"Format","value":"","parent":{"krate":0,"index":162}},{"kind":"Use","ref_id":{"krate":0,"index":957},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\mod.rs","byte_start":15412,"byte_end":15424,"line_start":125,"line_end":125,"column_start":31,"column_end":43},"alias_span":null,"name":"ModeRotation","value":"","parent":{"krate":0,"index":162}},{"kind":"Use","ref_id":{"krate":0,"index":993},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\mod.rs","byte_start":15455,"byte_end":15466,"line_start":126,"line_end":126,"column_start":30,"column_end":41},"alias_span":null,"name":"ModeScaling","value":"","parent":{"krate":0,"index":162}},{"kind":"Use","ref_id":{"krate":0,"index":1023},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\mod.rs","byte_start":15504,"byte_end":15521,"line_start":127,"line_end":127,"column_start":37,"column_end":54},"alias_span":null,"name":"ModeScanlineOrder","value":"","parent":{"krate":0,"index":162}},{"kind":"Use","ref_id":{"krate":0,"index":1089},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\mod.rs","byte_start":15547,"byte_end":15559,"line_start":128,"line_end":128,"column_start":25,"column_end":37},"alias_span":null,"name":"PresentFlags","value":"","parent":{"krate":0,"index":162}},{"kind":"Use","ref_id":{"krate":0,"index":1090},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\mod.rs","byte_start":15547,"byte_end":15559,"line_start":128,"line_end":128,"column_start":25,"column_end":37},"alias_span":null,"name":"PresentFlags","value":"","parent":{"krate":0,"index":170}},{"kind":"Use","ref_id":{"krate":0,"index":1107},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\mod.rs","byte_start":15585,"byte_end":15592,"line_start":129,"line_end":129,"column_start":25,"column_end":32},"alias_span":null,"name":"Scaling","value":"","parent":{"krate":0,"index":162}},{"kind":"Use","ref_id":{"krate":0,"index":1172},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\mod.rs","byte_start":15621,"byte_end":15635,"line_start":130,"line_end":130,"column_start":28,"column_end":42},"alias_span":null,"name":"SwapChainFlags","value":"","parent":{"krate":0,"index":162}},{"kind":"Use","ref_id":{"krate":0,"index":1173},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\mod.rs","byte_start":15621,"byte_end":15635,"line_start":130,"line_end":130,"column_start":28,"column_end":42},"alias_span":null,"name":"SwapChainFlags","value":"","parent":{"krate":0,"index":172}},{"kind":"Use","ref_id":{"krate":0,"index":1190},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\mod.rs","byte_start":15665,"byte_end":15675,"line_start":131,"line_end":131,"column_start":29,"column_end":39},"alias_span":null,"name":"SwapEffect","value":"","parent":{"krate":0,"index":162}},{"kind":"Use","ref_id":{"krate":0,"index":1254},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\mod.rs","byte_start":15699,"byte_end":15709,"line_start":132,"line_end":132,"column_start":23,"column_end":33},"alias_span":null,"name":"UsageFlags","value":"","parent":{"krate":0,"index":162}},{"kind":"Use","ref_id":{"krate":0,"index":1255},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\mod.rs","byte_start":15699,"byte_end":15709,"line_start":132,"line_end":132,"column_start":23,"column_end":33},"alias_span":null,"name":"UsageFlags","value":"","parent":{"krate":0,"index":174}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\lib.rs","byte_start":0,"byte_end":574,"line_start":1,"line_end":25,"column_start":1,"column_end":20},"name":"","qualname":"::","value":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":1358},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":1372},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":1376},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":1380},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":73},{"krate":0,"index":89},{"krate":0,"index":125},{"krate":0,"index":162},{"krate":0,"index":188},{"krate":0,"index":307},{"krate":0,"index":352}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(windows)","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\lib.rs","byte_start":0,"byte_end":16,"line_start":1,"line_end":1,"column_start":1,"column_end":17}}]},{"kind":"Mod","id":{"krate":0,"index":25},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\adapter.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"adapter","qualname":"::adapter","value":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\adapter.rs","parent":null,"children":[{"krate":0,"index":26},{"krate":0,"index":1388},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":481},{"krate":0,"index":487},{"krate":0,"index":483},{"krate":0,"index":484},{"krate":0,"index":45},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":489},{"krate":0,"index":493},{"krate":0,"index":491},{"krate":0,"index":55},{"krate":0,"index":67},{"krate":0,"index":494},{"krate":0,"index":501},{"krate":0,"index":498},{"krate":0,"index":69}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":481},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\adapter.rs","byte_start":1021,"byte_end":1028,"line_start":19,"line_end":19,"column_start":12,"column_end":19},"name":"Adapter","qualname":"::adapter::Adapter","value":"Adapter {  }","parent":null,"children":[{"krate":0,"index":482}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\adapter.rs","byte_start":1106,"byte_end":1114,"line_start":25,"line_end":25,"column_start":12,"column_end":20},"name":"get_desc","qualname":"<Adapter>::get_desc","value":"pub fn get_desc(&Self) -> AdapterDesc","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\adapter.rs","byte_start":1085,"byte_end":1094,"line_start":24,"line_end":24,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\adapter.rs","byte_start":1473,"byte_end":1480,"line_start":39,"line_end":39,"column_start":12,"column_end":19},"name":"outputs","qualname":"<Adapter>::outputs","value":"pub fn outputs(&Self) -> OutputIter","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\adapter.rs","byte_start":1452,"byte_end":1461,"line_start":38,"line_end":38,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\adapter.rs","byte_start":1622,"byte_end":1633,"line_start":47,"line_end":47,"column_start":12,"column_end":23},"name":"get_factory","qualname":"<Adapter>::get_factory","value":"pub fn get_factory(&Self) -> Factory","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\adapter.rs","byte_start":1601,"byte_end":1610,"line_start":46,"line_end":46,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\adapter.rs","byte_start":1933,"byte_end":1941,"line_start":57,"line_end":57,"column_start":19,"column_end":27},"name":"from_raw","qualname":"<Adapter>::from_raw","value":"pub unsafe fn from_raw(*mut IDXGIAdapter1) -> Adapter","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\adapter.rs","byte_start":1905,"byte_end":1914,"line_start":56,"line_end":56,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\adapter.rs","byte_start":2087,"byte_end":2094,"line_start":64,"line_end":64,"column_start":19,"column_end":26},"name":"get_raw","qualname":"<Adapter>::get_raw","value":"pub unsafe fn get_raw(&Self) -> *mut IDXGIAdapter1","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\adapter.rs","byte_start":2059,"byte_end":2068,"line_start":63,"line_end":63,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":489},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\adapter.rs","byte_start":2463,"byte_end":2474,"line_start":81,"line_end":81,"column_start":12,"column_end":23},"name":"AdapterDesc","qualname":"::adapter::AdapterDesc","value":"AdapterDesc {  }","parent":null,"children":[{"krate":0,"index":490}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\adapter.rs","byte_start":2554,"byte_end":2565,"line_start":87,"line_end":87,"column_start":12,"column_end":23},"name":"description","qualname":"<AdapterDesc>::description","value":"pub fn description(&Self) -> String","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\adapter.rs","byte_start":2533,"byte_end":2542,"line_start":86,"line_end":86,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\adapter.rs","byte_start":2869,"byte_end":2878,"line_start":98,"line_end":98,"column_start":12,"column_end":21},"name":"vendor_id","qualname":"<AdapterDesc>::vendor_id","value":"pub fn vendor_id(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\adapter.rs","byte_start":2848,"byte_end":2857,"line_start":97,"line_end":97,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":59},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\adapter.rs","byte_start":2954,"byte_end":2963,"line_start":103,"line_end":103,"column_start":12,"column_end":21},"name":"device_id","qualname":"<AdapterDesc>::device_id","value":"pub fn device_id(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\adapter.rs","byte_start":2933,"byte_end":2942,"line_start":102,"line_end":102,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\adapter.rs","byte_start":3039,"byte_end":3049,"line_start":108,"line_end":108,"column_start":12,"column_end":22},"name":"sub_sys_id","qualname":"<AdapterDesc>::sub_sys_id","value":"pub fn sub_sys_id(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\adapter.rs","byte_start":3018,"byte_end":3027,"line_start":107,"line_end":107,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\adapter.rs","byte_start":3125,"byte_end":3133,"line_start":113,"line_end":113,"column_start":12,"column_end":20},"name":"revision","qualname":"<AdapterDesc>::revision","value":"pub fn revision(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\adapter.rs","byte_start":3104,"byte_end":3113,"line_start":112,"line_end":112,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\adapter.rs","byte_start":3209,"byte_end":3231,"line_start":118,"line_end":118,"column_start":12,"column_end":34},"name":"dedicated_video_memory","qualname":"<AdapterDesc>::dedicated_video_memory","value":"pub fn dedicated_video_memory(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\adapter.rs","byte_start":3188,"byte_end":3197,"line_start":117,"line_end":117,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\adapter.rs","byte_start":3321,"byte_end":3344,"line_start":123,"line_end":123,"column_start":12,"column_end":35},"name":"dedicated_system_memory","qualname":"<AdapterDesc>::dedicated_system_memory","value":"pub fn dedicated_system_memory(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\adapter.rs","byte_start":3300,"byte_end":3309,"line_start":122,"line_end":122,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\adapter.rs","byte_start":3435,"byte_end":3455,"line_start":128,"line_end":128,"column_start":12,"column_end":32},"name":"shared_system_memory","qualname":"<AdapterDesc>::shared_system_memory","value":"pub fn shared_system_memory(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\adapter.rs","byte_start":3414,"byte_end":3423,"line_start":127,"line_end":127,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\adapter.rs","byte_start":3543,"byte_end":3555,"line_start":133,"line_end":133,"column_start":12,"column_end":24},"name":"adapter_luid","qualname":"<AdapterDesc>::adapter_luid","value":"pub fn adapter_luid(&Self) -> LUID","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\adapter.rs","byte_start":3522,"byte_end":3531,"line_start":132,"line_end":132,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\adapter.rs","byte_start":3635,"byte_end":3640,"line_start":138,"line_end":138,"column_start":12,"column_end":17},"name":"flags","qualname":"<AdapterDesc>::flags","value":"pub fn flags(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\adapter.rs","byte_start":3614,"byte_end":3623,"line_start":137,"line_end":137,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":494},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\adapter.rs","byte_start":4543,"byte_end":4553,"line_start":163,"line_end":163,"column_start":12,"column_end":22},"name":"OutputIter","qualname":"::adapter::OutputIter","value":"OutputIter {  }","parent":null,"children":[{"krate":0,"index":496},{"krate":0,"index":497}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":73},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\device.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"device","qualname":"::device","value":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\device.rs","parent":null,"children":[{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":1424},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":503},{"krate":0,"index":509},{"krate":0,"index":505},{"krate":0,"index":506},{"krate":0,"index":82},{"krate":0,"index":87},{"krate":0,"index":88}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":503},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\device.rs","byte_start":5417,"byte_end":5423,"line_start":11,"line_end":11,"column_start":12,"column_end":18},"name":"Device","qualname":"::device::Device","value":"Device {  }","parent":null,"children":[{"krate":0,"index":504}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\device.rs","byte_start":5498,"byte_end":5509,"line_start":17,"line_end":17,"column_start":12,"column_end":23},"name":"get_adapter","qualname":"<Device>::get_adapter","value":"pub fn get_adapter(&Self) -> Result<Adapter, Error>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\device.rs","byte_start":5477,"byte_end":5486,"line_start":16,"line_end":16,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\device.rs","byte_start":5932,"byte_end":5940,"line_start":29,"line_end":29,"column_start":19,"column_end":27},"name":"from_raw","qualname":"<Device>::from_raw","value":"pub unsafe fn from_raw(*mut IDXGIDevice) -> Device","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\device.rs","byte_start":5904,"byte_end":5913,"line_start":28,"line_end":28,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\device.rs","byte_start":6082,"byte_end":6089,"line_start":36,"line_end":36,"column_start":19,"column_end":26},"name":"get_raw","qualname":"<Device>::get_raw","value":"pub unsafe fn get_raw(&Self) -> *mut IDXGIDevice","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\device.rs","byte_start":6054,"byte_end":6063,"line_start":35,"line_end":35,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":89},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\error.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"error","qualname":"::error","value":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\error.rs","parent":null,"children":[{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":511},{"krate":0,"index":526},{"krate":0,"index":524},{"krate":0,"index":520},{"krate":0,"index":521},{"krate":0,"index":517},{"krate":0,"index":518},{"krate":0,"index":514},{"krate":0,"index":110},{"krate":0,"index":118},{"krate":0,"index":120},{"krate":0,"index":122},{"krate":0,"index":124}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":511},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\error.rs","byte_start":6712,"byte_end":6717,"line_start":13,"line_end":13,"column_start":12,"column_end":17},"name":"Error","qualname":"::error::Error","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":513},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\error.rs","byte_start":6718,"byte_end":6729,"line_start":13,"line_end":13,"column_start":18,"column_end":29},"name":"0","qualname":"::error::Error::0","value":"i32","parent":{"krate":0,"index":511},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\error.rs","byte_start":6771,"byte_end":6774,"line_start":17,"line_end":17,"column_start":12,"column_end":15},"name":"map","qualname":"<Error>::map","value":"pub fn map<T>(HRESULT, T) -> Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\error.rs","byte_start":6750,"byte_end":6759,"line_start":16,"line_end":16,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\error.rs","byte_start":6974,"byte_end":6980,"line_start":26,"line_end":26,"column_start":12,"column_end":18},"name":"map_if","qualname":"<Error>::map_if","value":"pub fn map_if<F, T>(HRESULT, F) -> Result<T, Error> where F: FnOnce() -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\error.rs","byte_start":6953,"byte_end":6962,"line_start":25,"line_end":25,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\error.rs","byte_start":7202,"byte_end":7212,"line_start":35,"line_end":35,"column_start":12,"column_end":22},"name":"from_win32","qualname":"<Error>::from_win32","value":"pub fn from_win32(DWORD) -> Error","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\error.rs","byte_start":7181,"byte_end":7190,"line_start":34,"line_end":34,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\error.rs","byte_start":7307,"byte_end":7318,"line_start":40,"line_end":40,"column_start":12,"column_end":23},"name":"get_message","qualname":"<Error>::get_message","value":"pub fn get_message(&Self) -> String","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\error.rs","byte_start":7286,"byte_end":7295,"line_start":39,"line_end":39,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":125},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\factory.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"factory","qualname":"::factory","value":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\factory.rs","parent":null,"children":[{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":1474},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":527},{"krate":0,"index":533},{"krate":0,"index":529},{"krate":0,"index":530},{"krate":0,"index":145},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":535},{"krate":0,"index":542},{"krate":0,"index":539},{"krate":0,"index":158}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":527},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\factory.rs","byte_start":9033,"byte_end":9040,"line_start":17,"line_end":17,"column_start":12,"column_end":19},"name":"Factory","qualname":"::factory::Factory","value":"Factory {  }","parent":null,"children":[{"krate":0,"index":528}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\factory.rs","byte_start":9118,"byte_end":9121,"line_start":23,"line_end":23,"column_start":12,"column_end":15},"name":"new","qualname":"<Factory>::new","value":"pub fn new() -> Result<Factory, Error>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\factory.rs","byte_start":9097,"byte_end":9106,"line_start":22,"line_end":22,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\factory.rs","byte_start":9444,"byte_end":9452,"line_start":35,"line_end":35,"column_start":12,"column_end":20},"name":"adapters","qualname":"<Factory>::adapters","value":"pub fn adapters(&Self) -> AdapterIter","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\factory.rs","byte_start":9423,"byte_end":9432,"line_start":34,"line_end":34,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\factory.rs","byte_start":9597,"byte_end":9619,"line_start":43,"line_end":43,"column_start":12,"column_end":34},"name":"get_window_association","qualname":"<Factory>::get_window_association","value":"pub fn get_window_association(&Self) -> Result<HWND, Error>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\factory.rs","byte_start":9576,"byte_end":9585,"line_start":42,"line_end":42,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\factory.rs","byte_start":9858,"byte_end":9881,"line_start":52,"line_end":52,"column_start":19,"column_end":42},"name":"make_window_association","qualname":"<Factory>::make_window_association","value":"pub unsafe fn make_window_association(&Self, HWND, UINT) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\factory.rs","byte_start":9830,"byte_end":9839,"line_start":51,"line_end":51,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\factory.rs","byte_start":10065,"byte_end":10088,"line_start":58,"line_end":58,"column_start":19,"column_end":42},"name":"create_software_adapter","qualname":"<Factory>::create_software_adapter","value":"pub unsafe fn create_software_adapter(&Self, HMODULE)\n-> Result<Adapter, Error>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\factory.rs","byte_start":10037,"byte_end":10046,"line_start":57,"line_end":57,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\factory.rs","byte_start":10465,"byte_end":10490,"line_start":70,"line_end":70,"column_start":12,"column_end":37},"name":"create_swapchain_for_hwnd","qualname":"<Factory>::create_swapchain_for_hwnd","value":"pub fn create_swapchain_for_hwnd<'a>(&'a Self, &'a Device)\n-> SwapChainHwndBuilder","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\factory.rs","byte_start":10444,"byte_end":10453,"line_start":69,"line_end":69,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\factory.rs","byte_start":10645,"byte_end":10653,"line_start":75,"line_end":75,"column_start":19,"column_end":27},"name":"from_raw","qualname":"<Factory>::from_raw","value":"pub unsafe fn from_raw(*mut IDXGIFactory2) -> Factory","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\factory.rs","byte_start":10617,"byte_end":10626,"line_start":74,"line_end":74,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\factory.rs","byte_start":10799,"byte_end":10806,"line_start":82,"line_end":82,"column_start":19,"column_end":26},"name":"get_raw","qualname":"<Factory>::get_raw","value":"pub unsafe fn get_raw(&Self) -> *mut IDXGIFactory2","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\factory.rs","byte_start":10771,"byte_end":10780,"line_start":81,"line_end":81,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":535},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\factory.rs","byte_start":10972,"byte_end":10983,"line_start":91,"line_end":91,"column_start":12,"column_end":23},"name":"AdapterIter","qualname":"::factory::AdapterIter","value":"AdapterIter {  }","parent":null,"children":[{"krate":0,"index":537},{"krate":0,"index":538}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":162},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"flags","qualname":"::flags","value":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\mod.rs","parent":null,"children":[{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":1512},{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":1516},{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":1520},{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":187}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":175},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\alpha_mode.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"alpha_mode","qualname":"::flags::alpha_mode","value":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\alpha_mode.rs","parent":null,"children":[{"krate":0,"index":546},{"krate":0,"index":576},{"krate":0,"index":574},{"krate":0,"index":572},{"krate":0,"index":569},{"krate":0,"index":570},{"krate":0,"index":566},{"krate":0,"index":567},{"krate":0,"index":564},{"krate":0,"index":562},{"krate":0,"index":559},{"krate":0,"index":544}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":547},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\alpha_mode.rs","byte_start":15972,"byte_end":15983,"line_start":4,"line_end":4,"column_start":9,"column_end":20},"name":"Unspecified","qualname":"::flags::alpha_mode::AlphaMode::Unspecified","value":"AlphaMode::Unspecified","parent":{"krate":0,"index":546},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":550},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\alpha_mode.rs","byte_start":15997,"byte_end":16010,"line_start":5,"line_end":5,"column_start":9,"column_end":22},"name":"Premultiplied","qualname":"::flags::alpha_mode::AlphaMode::Premultiplied","value":"AlphaMode::Premultiplied","parent":{"krate":0,"index":546},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":553},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\alpha_mode.rs","byte_start":16024,"byte_end":16032,"line_start":6,"line_end":6,"column_start":9,"column_end":17},"name":"Straight","qualname":"::flags::alpha_mode::AlphaMode::Straight","value":"AlphaMode::Straight","parent":{"krate":0,"index":546},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":556},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\alpha_mode.rs","byte_start":16046,"byte_end":16052,"line_start":7,"line_end":7,"column_start":9,"column_end":15},"name":"Ignore","qualname":"::flags::alpha_mode::AlphaMode::Ignore","value":"AlphaMode::Ignore","parent":{"krate":0,"index":546},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":546},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\alpha_mode.rs","byte_start":15952,"byte_end":15961,"line_start":3,"line_end":3,"column_start":14,"column_end":23},"name":"AlphaMode","qualname":"::flags::alpha_mode::AlphaMode","value":"pub enum AlphaMode {\n    Unspecified = ,\n    Premultiplied = ,\n    Straight = ,\n    Ignore = ,\n}","parent":null,"children":[{"krate":0,"index":547},{"krate":0,"index":550},{"krate":0,"index":553},{"krate":0,"index":556}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"repr(u32)","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\mod.rs","byte_start":11782,"byte_end":11797,"line_start":9,"line_end":9,"column_start":9,"column_end":24}}]},{"kind":"Mod","id":{"krate":0,"index":176},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"format","qualname":"::flags::format","value":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","parent":null,"children":[{"krate":0,"index":579},{"krate":0,"index":954},{"krate":0,"index":952},{"krate":0,"index":950},{"krate":0,"index":947},{"krate":0,"index":948},{"krate":0,"index":944},{"krate":0,"index":945},{"krate":0,"index":942},{"krate":0,"index":940},{"krate":0,"index":937},{"krate":0,"index":577},{"krate":0,"index":177}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":580},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":24899,"byte_end":24906,"line_start":174,"line_end":174,"column_start":9,"column_end":16},"name":"Unknown","qualname":"::flags::format::Format::Unknown","value":"Format::Unknown","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" The format is not known.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":583},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":25100,"byte_end":25120,"line_start":178,"line_end":178,"column_start":9,"column_end":29},"name":"R32G32B32A32Typeless","qualname":"::flags::format::Format::R32G32B32A32Typeless","value":"Format::R32G32B32A32Typeless","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A four-component, 128-bit typeless format that supports 32 bits per\n channel including alpha.\n <sup>[1](#restrictions-and-notes-on-formats)</sup>\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":586},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":25325,"byte_end":25342,"line_start":183,"line_end":183,"column_start":9,"column_end":26},"name":"R32G32B32A32Float","qualname":"::flags::format::Format::R32G32B32A32Float","value":"Format::R32G32B32A32Float","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A four-component, 128-bit floating-point format that supports 32\n bits per channel including alpha.\n <sup>[1,5,8](#restrictions-and-notes-on-formats)</sup>\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":589},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":25545,"byte_end":25561,"line_start":188,"line_end":188,"column_start":9,"column_end":25},"name":"R32G32B32A32Uint","qualname":"::flags::format::Format::R32G32B32A32Uint","value":"Format::R32G32B32A32Uint","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A four-component, 128-bit unsigned-integer format that supports 32\n bits per channel including alpha.\n <sup>[1](#restrictions-and-notes-on-formats)</sup>\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":592},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":25762,"byte_end":25778,"line_start":193,"line_end":193,"column_start":9,"column_end":25},"name":"R32G32B32A32Sint","qualname":"::flags::format::Format::R32G32B32A32Sint","value":"Format::R32G32B32A32Sint","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A four-component, 128-bit signed-integer format that supports 32\n bits per channel including alpha.\n <sup>[1](#restrictions-and-notes-on-formats)</sup>\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":595},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":25900,"byte_end":25917,"line_start":197,"line_end":197,"column_start":9,"column_end":26},"name":"R32G32B32Typeless","qualname":"::flags::format::Format::R32G32B32Typeless","value":"Format::R32G32B32Typeless","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A three-component, 96-bit typeless format that supports 32 bits per\n color channel.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":598},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":26110,"byte_end":26124,"line_start":202,"line_end":202,"column_start":9,"column_end":23},"name":"R32G32B32Float","qualname":"::flags::format::Format::R32G32B32Float","value":"Format::R32G32B32Float","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A three-component, 96-bit floating-point format that supports 32\n bits per color channel.\n <sup>[5,8](#restrictions-and-notes-on-formats)</sup>\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":601},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":26254,"byte_end":26267,"line_start":206,"line_end":206,"column_start":9,"column_end":22},"name":"R32G32B32Uint","qualname":"::flags::format::Format::R32G32B32Uint","value":"Format::R32G32B32Uint","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A three-component, 96-bit unsigned-integer format that supports 32\n bits per color channel.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":604},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":26395,"byte_end":26408,"line_start":210,"line_end":210,"column_start":9,"column_end":22},"name":"R32G32B32Sint","qualname":"::flags::format::Format::R32G32B32Sint","value":"Format::R32G32B32Sint","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A three-component, 96-bit signed-integer format that supports 32\n bits per color channel.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":607},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":26539,"byte_end":26559,"line_start":214,"line_end":214,"column_start":9,"column_end":29},"name":"R16G16B16A16Typeless","qualname":"::flags::format::Format::R16G16B16A16Typeless","value":"Format::R16G16B16A16Typeless","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A four-component, 64-bit typeless format that supports 16 bits per\n channel including alpha.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":610},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":26761,"byte_end":26778,"line_start":219,"line_end":219,"column_start":9,"column_end":26},"name":"R16G16B16A16Float","qualname":"::flags::format::Format::R16G16B16A16Float","value":"Format::R16G16B16A16Float","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A four-component, 64-bit floating-point format that supports 16\n bits per channel including alpha.\n <sup>[5,7](#restrictions-and-notes-on-formats)</sup>\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":613},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":26929,"byte_end":26946,"line_start":223,"line_end":223,"column_start":9,"column_end":26},"name":"R16G16B16A16Unorm","qualname":"::flags::format::Format::R16G16B16A16Unorm","value":"Format::R16G16B16A16Unorm","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A four-component, 64-bit unsigned-normalized-integer format that\n supports 16 bits per channel including alpha.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":616},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":27086,"byte_end":27102,"line_start":227,"line_end":227,"column_start":9,"column_end":25},"name":"R16G16B16A16Uint","qualname":"::flags::format::Format::R16G16B16A16Uint","value":"Format::R16G16B16A16Uint","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A four-component, 64-bit unsigned-integer format that supports 16\n bits per channel including alpha.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":619},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":27251,"byte_end":27268,"line_start":231,"line_end":231,"column_start":9,"column_end":26},"name":"R16G16B16A16Snorm","qualname":"::flags::format::Format::R16G16B16A16Snorm","value":"Format::R16G16B16A16Snorm","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A four-component, 64-bit signed-normalized-integer format that\n supports 16 bits per channel including alpha.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":622},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":27406,"byte_end":27422,"line_start":235,"line_end":235,"column_start":9,"column_end":25},"name":"R16G16B16A16Sint","qualname":"::flags::format::Format::R16G16B16A16Sint","value":"Format::R16G16B16A16Sint","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A four-component, 64-bit signed-integer format that supports 16\n bits per channel including alpha.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":625},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":27579,"byte_end":27593,"line_start":239,"line_end":239,"column_start":9,"column_end":23},"name":"R32G32Typeless","qualname":"::flags::format::Format::R32G32Typeless","value":"Format::R32G32Typeless","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A two-component, 64-bit typeless format that supports 32 bits for\n the red channel and 32 bits for the green channel.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":628},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":27821,"byte_end":27832,"line_start":244,"line_end":244,"column_start":9,"column_end":20},"name":"R32G32Float","qualname":"::flags::format::Format::R32G32Float","value":"Format::R32G32Float","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A two-component, 64-bit floating-point format that supports 32 bits\n for the red channel and 32 bits for the green channel.\n <sup>[5,8](#restrictions-and-notes-on-formats)</sup>\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":631},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":27997,"byte_end":28007,"line_start":248,"line_end":248,"column_start":9,"column_end":19},"name":"R32G32Uint","qualname":"::flags::format::Format::R32G32Uint","value":"Format::R32G32Uint","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A two-component, 64-bit unsigned-integer format that supports 32\n bits for the red channel and 32 bits for the green channel.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":634},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":28170,"byte_end":28180,"line_start":252,"line_end":252,"column_start":9,"column_end":19},"name":"R32G32Sint","qualname":"::flags::format::Format::R32G32Sint","value":"Format::R32G32Sint","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A two-component, 64-bit signed-integer format that supports 32 bits\n for the red channel and 32 bits for the green channel.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":637},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":28357,"byte_end":28373,"line_start":256,"line_end":256,"column_start":9,"column_end":25},"name":"R32G8X24Typeless","qualname":"::flags::format::Format::R32G8X24Typeless","value":"Format::R32G8X24Typeless","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A two-component, 64-bit typeless format that supports 32 bits for\n the red channel, 8 bits for the green channel, and 24 bits are unused.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":640},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":28663,"byte_end":28680,"line_start":262,"line_end":262,"column_start":9,"column_end":26},"name":"D32FloatS8X24Uint","qualname":"::flags::format::Format::D32FloatS8X24Uint","value":"Format::D32FloatS8X24Uint","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A 32-bit floating-point component, and two unsigned-integer\n components (with an additional 32 bits). This format supports\n 32-bit depth, 8-bit stencil, and 24 bits are unused.\n <sup>[5](#restrictions-and-notes-on-formats)</sup>\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":643},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":28972,"byte_end":28993,"line_start":268,"line_end":268,"column_start":9,"column_end":30},"name":"R32FloatX8X24Typeless","qualname":"::flags::format::Format::R32FloatX8X24Typeless","value":"Format::R32FloatX8X24Typeless","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A 32-bit floating-point component, and two typeless components\n (with an additional 32 bits). This format supports 32-bit red\n channel, 8 bits are unused, and 24 bits are unused.\n <sup>[5](#restrictions-and-notes-on-formats)</sup>\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":646},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":29222,"byte_end":29242,"line_start":273,"line_end":273,"column_start":9,"column_end":29},"name":"X32TypelessG8X24Uint","qualname":"::flags::format::Format::X32TypelessG8X24Uint","value":"Format::X32TypelessG8X24Uint","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A 32-bit typeless component, and two unsigned-integer components\n (with an additional 32 bits). This format has 32 bits unused, 8\n bits for green channel, and 24 bits are unused.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":649},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":29382,"byte_end":29401,"line_start":277,"line_end":277,"column_start":9,"column_end":28},"name":"R10G10B10A2Typeless","qualname":"::flags::format::Format::R10G10B10A2Typeless","value":"Format::R10G10B10A2Typeless","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A four-component, 32-bit typeless format that supports 10 bits for\n each color and 2 bits for alpha.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":652},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":29560,"byte_end":29576,"line_start":281,"line_end":281,"column_start":9,"column_end":25},"name":"R10G10B10A2Unorm","qualname":"::flags::format::Format::R10G10B10A2Unorm","value":"Format::R10G10B10A2Unorm","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A four-component, 32-bit unsigned-normalized-integer format that\n supports 10 bits for each color and 2 bits for alpha.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":655},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":29724,"byte_end":29739,"line_start":285,"line_end":285,"column_start":9,"column_end":24},"name":"R10G10B10A2Uint","qualname":"::flags::format::Format::R10G10B10A2Uint","value":"Format::R10G10B10A2Uint","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A four-component, 32-bit unsigned-integer format that supports 10\n bits for each color and 2 bits for alpha.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":658},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":30425,"byte_end":30439,"line_start":298,"line_end":298,"column_start":9,"column_end":23},"name":"R11G11B10Float","qualname":"::flags::format::Format::R11G11B10Float","value":"Format::R11G11B10Float","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" Three partial-precision floating-point numbers encoded into a single\n 32-bit value (a variant of s10e5, which is sign bit, 10-bit mantissa,\n and 5-bit biased (15) exponent). There are no sign bits, and there\n is a 5-bit biased (15) exponent for each channel, 6-bit mantissa for\n R and G, and a 5-bit mantissa for B, as shown in the following\n illustration.\n <sup>[5,7](#restrictions-and-notes-on-formats)</sup>","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":661},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":30570,"byte_end":30586,"line_start":302,"line_end":302,"column_start":9,"column_end":25},"name":"R8G8B8A8Typeless","qualname":"::flags::format::Format::R8G8B8A8Typeless","value":"Format::R8G8B8A8Typeless","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A four-component, 32-bit typeless format that supports 8 bits per\n channel including alpha.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":664},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":30736,"byte_end":30749,"line_start":306,"line_end":306,"column_start":9,"column_end":22},"name":"R8G8B8A8Unorm","qualname":"::flags::format::Format::R8G8B8A8Unorm","value":"Format::R8G8B8A8Unorm","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A four-component, 32-bit unsigned-normalized-integer format that\n supports 8 bits per channel including alpha.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":667},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":30904,"byte_end":30921,"line_start":310,"line_end":310,"column_start":9,"column_end":26},"name":"R8G8B8A8UnormSrgb","qualname":"::flags::format::Format::R8G8B8A8UnormSrgb","value":"Format::R8G8B8A8UnormSrgb","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A four-component, 32-bit unsigned-normalized integer sRGB format\n that supports 8 bits per channel including alpha.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":670},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":31060,"byte_end":31072,"line_start":314,"line_end":314,"column_start":9,"column_end":21},"name":"R8G8B8A8Uint","qualname":"::flags::format::Format::R8G8B8A8Uint","value":"Format::R8G8B8A8Uint","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A four-component, 32-bit unsigned-integer format that supports 8\n bits per channel including alpha.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":673},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":31220,"byte_end":31233,"line_start":318,"line_end":318,"column_start":9,"column_end":22},"name":"R8G8B8A8Snorm","qualname":"::flags::format::Format::R8G8B8A8Snorm","value":"Format::R8G8B8A8Snorm","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A four-component, 32-bit signed-normalized-integer format that\n supports 8 bits per channel including alpha.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":676},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":31370,"byte_end":31382,"line_start":322,"line_end":322,"column_start":9,"column_end":21},"name":"R8G8B8A8Sint","qualname":"::flags::format::Format::R8G8B8A8Sint","value":"Format::R8G8B8A8Sint","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A four-component, 32-bit signed-integer format that supports 8\n bits per channel including alpha.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":679},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":31539,"byte_end":31553,"line_start":326,"line_end":326,"column_start":9,"column_end":23},"name":"R16G16Typeless","qualname":"::flags::format::Format::R16G16Typeless","value":"Format::R16G16Typeless","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A two-component, 32-bit typeless format that supports 16 bits for\n the red channel and 16 bits for the green channel.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":682},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":31781,"byte_end":31792,"line_start":331,"line_end":331,"column_start":9,"column_end":20},"name":"R16G16Float","qualname":"::flags::format::Format::R16G16Float","value":"Format::R16G16Float","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A two-component, 32-bit floating-point format that supports 16\n bits for the red channel and 16 bits for the green channel.\n <sup>[5,7](#restrictions-and-notes-on-formats)</sup>\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":685},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":31950,"byte_end":31961,"line_start":335,"line_end":335,"column_start":9,"column_end":20},"name":"R16G16Unorm","qualname":"::flags::format::Format::R16G16Unorm","value":"Format::R16G16Unorm","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A two-component, 32-bit unsigned-normalized-integer format that\n supports 16 bits each for the green and red channels.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":688},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":32126,"byte_end":32136,"line_start":339,"line_end":339,"column_start":9,"column_end":19},"name":"R16G16Uint","qualname":"::flags::format::Format::R16G16Uint","value":"Format::R16G16Uint","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A two-component, 32-bit unsigned-integer format that supports 16\n bits for the red channel and 16 bits for the green channel.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":691},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":32322,"byte_end":32333,"line_start":344,"line_end":344,"column_start":9,"column_end":20},"name":"R16G16Snorm","qualname":"::flags::format::Format::R16G16Snorm","value":"Format::R16G16Snorm","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A two-component, 32-bit signed-normalized-integer format that\n supports 16 bits for the red channel and 16 bits for the green\n channel.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":694},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":32496,"byte_end":32506,"line_start":348,"line_end":348,"column_start":9,"column_end":19},"name":"R16G16Sint","qualname":"::flags::format::Format::R16G16Sint","value":"Format::R16G16Sint","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A two-component, 32-bit signed-integer format that supports 16\n bits for the red channel and 16 bits for the green channel.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":697},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":32632,"byte_end":32643,"line_start":352,"line_end":352,"column_start":9,"column_end":20},"name":"R32Typeless","qualname":"::flags::format::Format::R32Typeless","value":"Format::R32Typeless","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A single-component, 32-bit typeless format that supports 32 bits\n for the red channel.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":700},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":32830,"byte_end":32838,"line_start":357,"line_end":357,"column_start":9,"column_end":17},"name":"D32Float","qualname":"::flags::format::Format::D32Float","value":"Format::D32Float","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A single-component, 32-bit floating-point format that supports 32\n bits for depth.\n <sup>[5,8](#restrictions-and-notes-on-formats)</sup>\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":703},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":33035,"byte_end":33043,"line_start":362,"line_end":362,"column_start":9,"column_end":17},"name":"R32Float","qualname":"::flags::format::Format::R32Float","value":"Format::R32Float","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A single-component, 32-bit floating-point format that supports 32\n bits for the red channel.\n <sup>[5,8](#restrictions-and-notes-on-formats)</sup>\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":706},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":33177,"byte_end":33184,"line_start":366,"line_end":366,"column_start":9,"column_end":16},"name":"R32Uint","qualname":"::flags::format::Format::R32Uint","value":"Format::R32Uint","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A single-component, 32-bit unsigned-integer format that supports 32\n bits for the red channel.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":709},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":33316,"byte_end":33323,"line_start":370,"line_end":370,"column_start":9,"column_end":16},"name":"R32Sint","qualname":"::flags::format::Format::R32Sint","value":"Format::R32Sint","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A single-component, 32-bit signed-integer format that supports 32\n bits for the red channel.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":712},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":33479,"byte_end":33492,"line_start":374,"line_end":374,"column_start":9,"column_end":22},"name":"R24G8Typeless","qualname":"::flags::format::Format::R24G8Typeless","value":"Format::R24G8Typeless","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A two-component, 32-bit typeless format that supports 24 bits for\n the red channel and 8 bits for the green channel.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":715},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":33613,"byte_end":33627,"line_start":378,"line_end":378,"column_start":9,"column_end":23},"name":"D24UnormS8Uint","qualname":"::flags::format::Format::D24UnormS8Uint","value":"Format::D24UnormS8Uint","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A 32-bit z-buffer format that supports 24 bits for depth and 8 bits\n for stencil.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":718},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":33858,"byte_end":33876,"line_start":383,"line_end":383,"column_start":9,"column_end":27},"name":"R24UnormX8Typeless","qualname":"::flags::format::Format::R24UnormX8Typeless","value":"Format::R24UnormX8Typeless","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A 32-bit format, that contains a 24 bit, single-component,\n unsigned-normalized integer, with an additional typeless 8 bits.\n This format has 24 bits red channel and 8 bits unused.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":721},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":34114,"byte_end":34131,"line_start":388,"line_end":388,"column_start":9,"column_end":26},"name":"X24TypelessG8Uint","qualname":"::flags::format::Format::X24TypelessG8Uint","value":"Format::X24TypelessG8Uint","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A 32-bit format, that contains a 24 bit, single-component, typeless\n format, with an additional 8 bit unsigned integer component. This\n format has 24 bits unused and 8 bits green channel.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":724},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":34286,"byte_end":34298,"line_start":392,"line_end":392,"column_start":9,"column_end":21},"name":"R8G8Typeless","qualname":"::flags::format::Format::R8G8Typeless","value":"Format::R8G8Typeless","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A two-component, 16-bit typeless format that supports 8 bits for\n the red channel and 8 bits for the green channel.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":727},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":34484,"byte_end":34493,"line_start":397,"line_end":397,"column_start":9,"column_end":18},"name":"R8G8Unorm","qualname":"::flags::format::Format::R8G8Unorm","value":"Format::R8G8Unorm","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A two-component, 16-bit unsigned-normalized-integer format that\n supports 8 bits for the red channel and 8 bits for the green\n channel.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":730},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":34656,"byte_end":34664,"line_start":401,"line_end":401,"column_start":9,"column_end":17},"name":"R8G8Uint","qualname":"::flags::format::Format::R8G8Uint","value":"Format::R8G8Uint","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A two-component, 16-bit unsigned-integer format that supports 8\n bits for the red channel and 8 bits for the green channel.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":733},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":34848,"byte_end":34857,"line_start":406,"line_end":406,"column_start":9,"column_end":18},"name":"R8G8Snorm","qualname":"::flags::format::Format::R8G8Snorm","value":"Format::R8G8Snorm","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A two-component, 16-bit signed-normalized-integer format that\n supports 8 bits for the red channel and 8 bits for the green\n channel.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":736},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":35018,"byte_end":35026,"line_start":410,"line_end":410,"column_start":9,"column_end":17},"name":"R8G8Sint","qualname":"::flags::format::Format::R8G8Sint","value":"Format::R8G8Sint","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A two-component, 16-bit signed-integer format that supports 8 bits\n for the red channel and 8 bits for the green channel.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":739},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":35152,"byte_end":35163,"line_start":414,"line_end":414,"column_start":9,"column_end":20},"name":"R16Typeless","qualname":"::flags::format::Format::R16Typeless","value":"Format::R16Typeless","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A single-component, 16-bit typeless format that supports 16 bits\n for the red channel.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":742},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":35360,"byte_end":35368,"line_start":419,"line_end":419,"column_start":9,"column_end":17},"name":"R16Float","qualname":"::flags::format::Format::R16Float","value":"Format::R16Float","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A single-component, 16-bit floating-point format that supports 16\n bits for the red channel.\n <sup>[5,7](#restrictions-and-notes-on-formats)</sup>\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":745},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":35503,"byte_end":35511,"line_start":423,"line_end":423,"column_start":9,"column_end":17},"name":"D16Unorm","qualname":"::flags::format::Format::D16Unorm","value":"Format::D16Unorm","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A single-component, 16-bit unsigned-normalized-integer format that\n supports 16 bits for depth.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":748},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":35656,"byte_end":35664,"line_start":427,"line_end":427,"column_start":9,"column_end":17},"name":"R16Unorm","qualname":"::flags::format::Format::R16Unorm","value":"Format::R16Unorm","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A single-component, 16-bit unsigned-normalized-integer format that\n supports 16 bits for the red channel.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":751},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":35798,"byte_end":35805,"line_start":431,"line_end":431,"column_start":9,"column_end":16},"name":"R16Uint","qualname":"::flags::format::Format::R16Uint","value":"Format::R16Uint","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A single-component, 16-bit unsigned-integer format that supports\n 16 bits for the red channel.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":754},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":35948,"byte_end":35956,"line_start":435,"line_end":435,"column_start":9,"column_end":17},"name":"R16Snorm","qualname":"::flags::format::Format::R16Snorm","value":"Format::R16Snorm","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A single-component, 16-bit signed-normalized-integer format that\n supports 16 bits for the red channel.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":757},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":36088,"byte_end":36095,"line_start":439,"line_end":439,"column_start":9,"column_end":16},"name":"R16Sint","qualname":"::flags::format::Format::R16Sint","value":"Format::R16Sint","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A single-component, 16-bit signed-integer format that supports 16\n bits for the red channel.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":760},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":36219,"byte_end":36229,"line_start":443,"line_end":443,"column_start":9,"column_end":19},"name":"R8Typeless","qualname":"::flags::format::Format::R8Typeless","value":"Format::R8Typeless","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A single-component, 8-bit typeless format that supports 8 bits for\n the red channel.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":763},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":36372,"byte_end":36379,"line_start":447,"line_end":447,"column_start":9,"column_end":16},"name":"R8Unorm","qualname":"::flags::format::Format::R8Unorm","value":"Format::R8Unorm","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A single-component, 8-bit unsigned-normalized-integer format that\n supports 8 bits for the red channel.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":766},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":36511,"byte_end":36517,"line_start":451,"line_end":451,"column_start":9,"column_end":15},"name":"R8Uint","qualname":"::flags::format::Format::R8Uint","value":"Format::R8Uint","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A single-component, 8-bit unsigned-integer format that supports 8\n bits for the red channel.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":769},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":36658,"byte_end":36665,"line_start":455,"line_end":455,"column_start":9,"column_end":16},"name":"R8Snorm","qualname":"::flags::format::Format::R8Snorm","value":"Format::R8Snorm","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A single-component, 8-bit signed-normalized-integer format that\n supports 8 bits for the red channel.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":772},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":36795,"byte_end":36801,"line_start":459,"line_end":459,"column_start":9,"column_end":15},"name":"R8Sint","qualname":"::flags::format::Format::R8Sint","value":"Format::R8Sint","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A single-component, 8-bit signed-integer format that supports 8\n bits for the red channel.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":775},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":36918,"byte_end":36925,"line_start":463,"line_end":463,"column_start":9,"column_end":16},"name":"A8Unorm","qualname":"::flags::format::Format::A8Unorm","value":"Format::A8Unorm","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A single-component, 8-bit unsigned-normalized-integer format for\n alpha only.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":778},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":37130,"byte_end":37137,"line_start":468,"line_end":468,"column_start":9,"column_end":16},"name":"R1Unorm","qualname":"::flags::format::Format::R1Unorm","value":"Format::R1Unorm","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A single-component, 1-bit unsigned-normalized integer format that\n supports 1 bit for the red channel.\n <sup>[2](#restrictions-and-notes-on-formats)</sup>\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":781},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":37833,"byte_end":37855,"line_start":481,"line_end":481,"column_start":9,"column_end":31},"name":"R9G9B9E5SharedExponent","qualname":"::flags::format::Format::R9G9B9E5SharedExponent","value":"Format::R9G9B9E5SharedExponent","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" Three partial-precision floating-point numbers encoded into a\n single 32-bit value all sharing the same 5-bit exponent (variant\n of s10e5, which is sign bit, 10-bit mantissa, and 5-bit biased\n (15) exponent). There is no sign bit, and there is a shared 5-bit\n biased (15) exponent and a 9-bit mantissa for each channel, as\n shown in the following illustration.\n <sup>[2,6,7](#restrictions-and-notes-on-formats)</sup>","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":784},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":38351,"byte_end":38365,"line_start":492,"line_end":492,"column_start":9,"column_end":23},"name":"R8G8_B8G8Unorm","qualname":"::flags::format::Format::R8G8_B8G8Unorm","value":"Format::R8G8_B8G8Unorm","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A four-component, 32-bit unsigned-normalized-integer format. This\n packed RGB format is analogous to the UYVY format. Each 32-bit\n block describes a pair of pixels: (R8, G8, B8) and (R8, G8, B8)\n where the R8/B8 values are repeated, and the G8 values are unique\n to each pixel.\n <sup>[3](#restrictions-and-notes-on-formats)</sup>","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\mod.rs","byte_start":11935,"byte_end":11944,"line_start":13,"line_end":13,"column_start":17,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":787},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":38861,"byte_end":38875,"line_start":503,"line_end":503,"column_start":9,"column_end":23},"name":"G8R8_G8B8Unorm","qualname":"::flags::format::Format::G8R8_G8B8Unorm","value":"Format::G8R8_G8B8Unorm","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A four-component, 32-bit unsigned-normalized-integer format. This\n packed RGB format is analogous to the YUY2 format. Each 32-bit\n block describes a pair of pixels: (R8, G8, B8) and (R8, G8, B8)\n where the R8/B8 values are repeated, and the G8 values are unique\n to each pixel.\n <sup>[3](#restrictions-and-notes-on-formats)</sup>","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\mod.rs","byte_start":11935,"byte_end":11944,"line_start":13,"line_end":13,"column_start":17,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":790},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":39186,"byte_end":39197,"line_start":510,"line_end":510,"column_start":9,"column_end":20},"name":"Bc1Typeless","qualname":"::flags::format::Format::Bc1Typeless","value":"Format::Bc1Typeless","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" Four-component typeless block-compression format.\n For information about block-compression formats, see\n [Texture Block Compression in Direct3D 11.][1]","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":793},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":39499,"byte_end":39507,"line_start":517,"line_end":517,"column_start":9,"column_end":17},"name":"Bc1Unorm","qualname":"::flags::format::Format::Bc1Unorm","value":"Format::Bc1Unorm","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" Four-component block-compression format.\n For information about block-compression formats, see\n [Texture Block Compression in Direct3D 11.][1]","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":796},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":39823,"byte_end":39835,"line_start":524,"line_end":524,"column_start":9,"column_end":21},"name":"Bc1UnormSrgb","qualname":"::flags::format::Format::Bc1UnormSrgb","value":"Format::Bc1UnormSrgb","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" Four-component block-compression format for sRGB data.\n For information about block-compression formats, see\n [Texture Block Compression in Direct3D 11.][1]","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":799},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":40146,"byte_end":40157,"line_start":531,"line_end":531,"column_start":9,"column_end":20},"name":"Bc2Typeless","qualname":"::flags::format::Format::Bc2Typeless","value":"Format::Bc2Typeless","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" Four-component typeless block-compression format.\n For information about block-compression formats, see\n [Texture Block Compression in Direct3D 11.][1]","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":802},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":40459,"byte_end":40467,"line_start":538,"line_end":538,"column_start":9,"column_end":17},"name":"Bc2Unorm","qualname":"::flags::format::Format::Bc2Unorm","value":"Format::Bc2Unorm","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" Four-component block-compression format.\n For information about block-compression formats, see\n [Texture Block Compression in Direct3D 11.][1]","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":805},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":40783,"byte_end":40795,"line_start":545,"line_end":545,"column_start":9,"column_end":21},"name":"Bc2UnormSrgb","qualname":"::flags::format::Format::Bc2UnormSrgb","value":"Format::Bc2UnormSrgb","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" Four-component block-compression format for sRGB data.\n For information about block-compression formats, see\n [Texture Block Compression in Direct3D 11.][1]","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":808},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":41106,"byte_end":41117,"line_start":552,"line_end":552,"column_start":9,"column_end":20},"name":"Bc3Typeless","qualname":"::flags::format::Format::Bc3Typeless","value":"Format::Bc3Typeless","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" Four-component typeless block-compression format.\n For information about block-compression formats, see\n [Texture Block Compression in Direct3D 11.][1]","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":811},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":41419,"byte_end":41427,"line_start":559,"line_end":559,"column_start":9,"column_end":17},"name":"Bc3Unorm","qualname":"::flags::format::Format::Bc3Unorm","value":"Format::Bc3Unorm","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" Four-component block-compression format.\n For information about block-compression formats, see\n [Texture Block Compression in Direct3D 11.][1]","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":814},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":41743,"byte_end":41755,"line_start":566,"line_end":566,"column_start":9,"column_end":21},"name":"Bc3UnormSrgb","qualname":"::flags::format::Format::Bc3UnormSrgb","value":"Format::Bc3UnormSrgb","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" Four-component block-compression format for sRGB data.\n For information about block-compression formats, see\n [Texture Block Compression in Direct3D 11.][1]","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":817},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":42065,"byte_end":42076,"line_start":573,"line_end":573,"column_start":9,"column_end":20},"name":"Bc4Typeless","qualname":"::flags::format::Format::Bc4Typeless","value":"Format::Bc4Typeless","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" One-component typeless block-compression format.\n For information about block-compression formats, see\n [Texture Block Compression in Direct3D 11.][1]","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":820},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":42377,"byte_end":42385,"line_start":580,"line_end":580,"column_start":9,"column_end":17},"name":"Bc4Unorm","qualname":"::flags::format::Format::Bc4Unorm","value":"Format::Bc4Unorm","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" One-component block-compression format.\n For information about block-compression formats, see\n [Texture Block Compression in Direct3D 11.][1]","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":823},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":42686,"byte_end":42694,"line_start":587,"line_end":587,"column_start":9,"column_end":17},"name":"Bc4Snorm","qualname":"::flags::format::Format::Bc4Snorm","value":"Format::Bc4Snorm","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" One-component block-compression format.\n For information about block-compression formats, see\n [Texture Block Compression in Direct3D 11.][1]","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":826},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":43004,"byte_end":43015,"line_start":594,"line_end":594,"column_start":9,"column_end":20},"name":"Bc5Typeless","qualname":"::flags::format::Format::Bc5Typeless","value":"Format::Bc5Typeless","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" Two-component typeless block-compression format.\n For information about block-compression formats, see\n [Texture Block Compression in Direct3D 11.][1]","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":829},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":43316,"byte_end":43324,"line_start":601,"line_end":601,"column_start":9,"column_end":17},"name":"Bc5Unorm","qualname":"::flags::format::Format::Bc5Unorm","value":"Format::Bc5Unorm","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" Two-component block-compression format.\n For information about block-compression formats, see\n [Texture Block Compression in Direct3D 11.][1]","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":832},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":43625,"byte_end":43633,"line_start":608,"line_end":608,"column_start":9,"column_end":17},"name":"Bc5Snorm","qualname":"::flags::format::Format::Bc5Snorm","value":"Format::Bc5Snorm","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" Two-component block-compression format.\n For information about block-compression formats, see\n [Texture Block Compression in Direct3D 11.][1]","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":835},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":44078,"byte_end":44089,"line_start":618,"line_end":618,"column_start":9,"column_end":20},"name":"B5G6R5Unorm","qualname":"::flags::format::Format::B5G6R5Unorm","value":"Format::B5G6R5Unorm","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A three-component, 16-bit unsigned-normalized-integer format that\n supports 5 bits for blue, 6 bits for green, and 5 bits for red.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":838},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":44525,"byte_end":44538,"line_start":628,"line_end":628,"column_start":9,"column_end":22},"name":"B5G5R5A1Unorm","qualname":"::flags::format::Format::B5G5R5A1Unorm","value":"Format::B5G5R5A1Unorm","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A four-component, 16-bit unsigned-normalized-integer format that\n supports 5 bits for each color channel and 1-bit alpha.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":841},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":44699,"byte_end":44712,"line_start":632,"line_end":632,"column_start":9,"column_end":22},"name":"B8G8R8A8Unorm","qualname":"::flags::format::Format::B8G8R8A8Unorm","value":"Format::B8G8R8A8Unorm","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A four-component, 32-bit unsigned-normalized-integer format that\n supports 8 bits for each color channel and 8-bit alpha.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":844},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":44875,"byte_end":44888,"line_start":636,"line_end":636,"column_start":9,"column_end":22},"name":"B8G8R8X8Unorm","qualname":"::flags::format::Format::B8G8R8X8Unorm","value":"Format::B8G8R8X8Unorm","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A four-component, 32-bit unsigned-normalized-integer format that\n supports 8 bits for each color channel and 8 bits unused.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":847},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":45045,"byte_end":45067,"line_start":640,"line_end":640,"column_start":9,"column_end":31},"name":"R10G10B10XrBiasA2Unorm","qualname":"::flags::format::Format::R10G10B10XrBiasA2Unorm","value":"Format::R10G10B10XrBiasA2Unorm","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A four-component, 32-bit 2.8-biased fixed-point format that\n supports 10 bits for each color channel and 2-bit alpha.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":850},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":45266,"byte_end":45282,"line_start":645,"line_end":645,"column_start":9,"column_end":25},"name":"B8G8R8A8Typeless","qualname":"::flags::format::Format::B8G8R8A8Typeless","value":"Format::B8G8R8A8Typeless","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A four-component, 32-bit typeless format that supports 8 bits\n for each channel including alpha.\n <sup>[4](#restrictions-and-notes-on-formats)</sup>\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":853},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":45505,"byte_end":45522,"line_start":650,"line_end":650,"column_start":9,"column_end":26},"name":"B8G8R8A8UnormSrgb","qualname":"::flags::format::Format::B8G8R8A8UnormSrgb","value":"Format::B8G8R8A8UnormSrgb","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A four-component, 32-bit unsigned-normalized standard RGB format\n that supports 8 bits for each channel including alpha.\n <sup>[3](#restrictions-and-notes-on-formats)</sup>\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":856},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":45734,"byte_end":45750,"line_start":655,"line_end":655,"column_start":9,"column_end":25},"name":"B8G8R8X8Typeless","qualname":"::flags::format::Format::B8G8R8X8Typeless","value":"Format::B8G8R8X8Typeless","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A four-component, 32-bit typeless format that supports 8 bits for\n each color channel, and 8 bits are unused.\n <sup>[3](#restrictions-and-notes-on-formats)</sup>\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":859},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":45986,"byte_end":46003,"line_start":660,"line_end":660,"column_start":9,"column_end":26},"name":"B8G8R8X8UnormSrgb","qualname":"::flags::format::Format::B8G8R8X8UnormSrgb","value":"Format::B8G8R8X8UnormSrgb","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A four-component, 32-bit unsigned-normalized standard RGB format\n that supports 8 bits for each color channel, and 8 bits are unused.\n <sup>[3](#restrictions-and-notes-on-formats)</sup>\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":862},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":46364,"byte_end":46376,"line_start":668,"line_end":668,"column_start":9,"column_end":21},"name":"Bc6hTypeless","qualname":"::flags::format::Format::Bc6hTypeless","value":"Format::Bc6hTypeless","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A typeless block-compression format.\n <sup>[4](#restrictions-and-notes-on-formats)</sup>\n For information about block-compression formats, see\n [Texture Block Compression in Direct3D 11.][1]","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":865},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":46791,"byte_end":46799,"line_start":677,"line_end":677,"column_start":9,"column_end":17},"name":"Bc6hUf16","qualname":"::flags::format::Format::Bc6hUf16","value":"Format::Bc6hUf16","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A block-compression format.\n <sup>[4](#restrictions-and-notes-on-formats)</sup>\n For information about block-compression formats, see\n [Texture Block Compression in Direct3D 11.][1]\n <sup>[5](#restrictions-and-notes-on-formats)</sup>","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":868},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":47214,"byte_end":47222,"line_start":686,"line_end":686,"column_start":9,"column_end":17},"name":"Bc6hSf16","qualname":"::flags::format::Format::Bc6hSf16","value":"Format::Bc6hSf16","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A block-compression format.\n <sup>[4](#restrictions-and-notes-on-formats)</sup>\n For information about block-compression formats, see\n [Texture Block Compression in Direct3D 11.][1]\n <sup>[5](#restrictions-and-notes-on-formats)</sup>","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":871},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":47583,"byte_end":47594,"line_start":694,"line_end":694,"column_start":9,"column_end":20},"name":"Bc7Typeless","qualname":"::flags::format::Format::Bc7Typeless","value":"Format::Bc7Typeless","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A typeless block-compression format.\n <sup>[4](#restrictions-and-notes-on-formats)</sup>\n For information about block-compression formats, see\n [Texture Block Compression in Direct3D 11.][1]","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":874},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":47946,"byte_end":47954,"line_start":702,"line_end":702,"column_start":9,"column_end":17},"name":"Bc7Unorm","qualname":"::flags::format::Format::Bc7Unorm","value":"Format::Bc7Unorm","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A block-compression format.\n <sup>[4](#restrictions-and-notes-on-formats)</sup>\n For information about block-compression formats, see\n [Texture Block Compression in Direct3D 11.][1]","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":877},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":48306,"byte_end":48318,"line_start":710,"line_end":710,"column_start":9,"column_end":21},"name":"Bc7UnormSrgb","qualname":"::flags::format::Format::Bc7UnormSrgb","value":"Format::Bc7UnormSrgb","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A block-compression format.\n <sup>[4](#restrictions-and-notes-on-formats)</sup>\n For information about block-compression formats, see\n [Texture Block Compression in Direct3D 11.][1]","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":880},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":49433,"byte_end":49437,"line_start":730,"line_end":730,"column_start":9,"column_end":13},"name":"Ayuv","qualname":"::flags::format::Format::Ayuv","value":"Format::Ayuv","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" Most common YUV 4:4:4 video resource format. Valid view formats\n for this video resource format are\n [R8G8B8A8Unorm](#variant.R8G8B8A8Unorm) and\n [R8G8B8A8Uint](#variant.R8G8B8A8Uint). For UAVs, an additional\n valid view format is [R32Uint](#variant.R32Uint). By using\n [R32Uint](#variant.R32Uint) for UAVs, you can both read and write\n as opposed to just write for [R8G8B8A8Unorm](#variant.R8G8B8A8Unorm)\n and [R8G8B8A8Uint](#variant.R8G8B8A8Uint). Supported view types are\n SRV, RTV, and UAV. One view provides a straightforward mapping of\n the entire surface. The mapping to the view channel is V->R8, U->G8,\n Y->B8, and A->A8.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":883},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":50588,"byte_end":50592,"line_start":750,"line_end":750,"column_start":9,"column_end":13},"name":"Y410","qualname":"::flags::format::Format::Y410","value":"Format::Y410","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" 10-bit per channel packed YUV 4:4:4 video resource format. Valid\n view formats for this video resource format are\n [R10G10B10A2Unorm](#variant.R10G10B10A2Unorm) and\n [R10G10B10A2Uint](#variant.R10G10B10A2Uint). For UAVs, an additional\n valid view format is [R32Uint](#variant.R32Uint). By using\n [R32Uint](#variant.R32Uint) for UAVs, you can both read and write as\n opposed to just write for [R10G10B10A2Unorm](#variant.R10G10B10A2Unorm)\n and [R10G10B10A2Uint](#variant.R10G10B10A2Uint). Supported view types\n are SRV and UAV. One view provides a straightforward mapping of the\n entire surface. The mapping to the view channel is U->R10, Y->G10,\n V->B10, and A->A2.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":886},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":51427,"byte_end":51431,"line_start":766,"line_end":766,"column_start":9,"column_end":13},"name":"Y416","qualname":"::flags::format::Format::Y416","value":"Format::Y416","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" 16-bit per channel packed YUV 4:4:4 video resource format. Valid\n view formats for this video resource format are\n [R16G16B16A16Unorm](#variant.R16G16B16A16Unorm) and\n [R16G16B16A16Uint](#variant.R16G16B16A16Uint). Supported view types\n are SRV and UAV. One view provides a straightforward mapping of the\n entire surface. The mapping to the view channel is U->R16, Y->G16,\n V->B16, and A->A16.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":889},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":53468,"byte_end":53472,"line_start":800,"line_end":800,"column_start":9,"column_end":13},"name":"Nv12","qualname":"::flags::format::Format::Nv12","value":"Format::Nv12","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" Most common YUV 4:2:0 video resource format. Valid luminance data\n view formats for this video resource format are\n [R8Unorm](#variant.R8Unorm) and [R8Uint](#variant.R8Uint). Valid\n chrominance data view formats (width and height are each 1/2 of\n luminance view) for this video resource format are\n [R8G8Unorm](#variant.R8G8Unorm) and [R8G8Uint](#variant.R8G8Uint).\n Supported view types are SRV, RTV, and UAV. For luminance data view,\n the mapping to the view channel is Y->R8. For chrominance data view,\n the mapping to the view channel is U->R8 and V->G8.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":892},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":56253,"byte_end":56257,"line_start":845,"line_end":845,"column_start":9,"column_end":13},"name":"P010","qualname":"::flags::format::Format::P010","value":"Format::P010","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" 10-bit per channel planar YUV 4:2:0 video resource format. Valid\n luminance data view formats for this video resource format are\n [R16Unorm](#variant.R16Unorm) and [R16Uint](#variant.R16Uint).\n The runtime does not enforce whether the lowest 6 bits are 0\n (given that this video resource format is a 10-bit format that\n uses 16 bits). If required, application shader code would have to\n enforce this manually. From the runtime's point of view,\n [P010](#variant.P010) is no different than [P016](#variant.P016).\n Valid chrominance data view formats (width and height are each 1/2\n of luminance view) for this video resource format are\n [R16G16Unorm](#variant.R16G16Unorm) and\n [R16G16Uint](#variant.R16G16Uint). For UAVs, an additional valid\n chrominance data view format is [R32Uint](#variant.R32Uint). By\n using [R32Uint](#variant.R32Uint) for UAVs, you can both read and\n write as opposed to just write for\n [R16G16Unorm](#variant.R16G16Unorm) and\n [R16G16Uint](#variant.R16G16Uint). Supported view types are SRV,\n RTV, and UAV. For luminance data view, the mapping to the view\n channel is Y->R16. For chrominance data view, the mapping to the\n view channel is U->R16 and V->G16.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":895},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":58665,"byte_end":58669,"line_start":885,"line_end":885,"column_start":9,"column_end":13},"name":"P016","qualname":"::flags::format::Format::P016","value":"Format::P016","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" 16-bit per channel planar YUV 4:2:0 video resource format. Valid\n luminance data view formats for this video resource format are\n [R16Unorm](#variant.R16Unorm) and [R16Uint](#variant.R16Uint).\n Valid chrominance data view formats (width and height are each 1/2\n of luminance view) for this video resource format are\n [R16G16Unorm](#variant.R16G16Unorm) and\n [R16G16Uint](#variant.R16G16Uint). For UAVs, an additional valid\n chrominance data view format is [R32Uint](#variant.R32Uint). By\n using [R32Uint](#variant.R32Uint) for UAVs, you can both read and\n write as opposed to just write for\n [R16G16Unorm](#variant.R16G16Unorm) and\n [R16G16Uint](#variant.R16G16Uint). Supported view types are SRV,\n RTV, and UAV. For luminance data view, the mapping to the view\n channel is Y->R16. For chrominance data view, the mapping to the\n view channel is U->R16 and V->G16.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":898},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":61222,"byte_end":61234,"line_start":926,"line_end":926,"column_start":9,"column_end":21},"name":"Yuv420Opaque","qualname":"::flags::format::Format::Yuv420Opaque","value":"Format::Yuv420Opaque","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" 8-bit per channel planar YUV 4:2:0 video resource format. This\n format is subsampled where each pixel has its own Y value, but\n each 2x2 pixel block shares a single U and V value. The runtime\n requires that the width and height of all resources that are\n created with this format are multiples of 2. The runtime also\n requires that the left, right, top, and bottom members of any\n `RECT` that are used for this format are multiples of 2. This\n format differs from [Nv12](#variant.Nv12) in that the layout of\n the data within the resource is completely opaque to applications.\n Applications cannot use the CPU to map the resource and then\n access the data within the resource. You cannot use shaders with\n this format. Because of this behavior, legacy hardware that\n supports a non-NV12 4:2:0 layout (for example, YV12, and so on)\n can be used. Also, new hardware that has a 4:2:0 implementation\n better than NV12 can be used when the application does not need\n the data to be in a standard layout.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":901},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":63050,"byte_end":63054,"line_start":959,"line_end":959,"column_start":9,"column_end":13},"name":"Yuy2","qualname":"::flags::format::Format::Yuy2","value":"Format::Yuy2","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" Most common YUV 4:2:2 video resource format. Valid view formats\n for this video resource format are\n [R8G8B8A8Unorm](#variant.R8G8B8A8Unorm) and\n [R8G8B8A8Uint](#variant.R8G8B8A8Uint). For UAVs, an additional\n valid view format is [R32Uint](#variant.R32Uint). By using\n [R32Uint](#variant.R32Uint) for UAVs, you can both read and write\n as opposed to just write for\n [R8G8B8A8Unorm](#variant.R8G8B8A8Unorm) and\n [R8G8B8A8Uint](#variant.R8G8B8A8Uint). Supported view types are\n SRV and UAV. One view provides a straightforward mapping of the\n entire surface. The mapping to the view channel is Y0->R8, U0->G8,\n Y1->B8, and V0->A8.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":904},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":64308,"byte_end":64312,"line_start":982,"line_end":982,"column_start":9,"column_end":13},"name":"Y210","qualname":"::flags::format::Format::Y210","value":"Format::Y210","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" 10-bit per channel packed YUV 4:2:2 video resource format. Valid\n view formats for this video resource format are\n [R16G16B16A16Unorm](#variant.R16G16B16A16Unorm) and\n [R16G16B16A16Uint](#variant.R16G16B16A16Uint). The runtime does\n not enforce whether the lowest 6 bits are 0 (given that this video\n resource format is a 10-bit format that uses 16 bits). If required,\n application shader code would have to enforce this manually. From\n the runtime's point of view, [Y210](#variant.Y210) is no different\n than [Y216](#variant.Y216). Supported view types are SRV and UAV.\n One view provides a straightforward mapping of the entire surface.\n The mapping to the view channel is Y0->R16, U->G16, Y1->B16, and\n V->A16.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":907},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":65193,"byte_end":65197,"line_start":1000,"line_end":1000,"column_start":9,"column_end":13},"name":"Y216","qualname":"::flags::format::Format::Y216","value":"Format::Y216","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" 16-bit per channel packed YUV 4:2:2 video resource format. Valid\n view formats for this video resource format are\n [R16G16B16A16Unorm](#variant.R16G16B16A16Unorm) and\n [R16G16B16A16Uint](#variant.R16G16B16A16Uint). Supported view types\n are SRV and UAV. One view provides a straightforward mapping of the\n entire surface. The mapping to the view channel is Y0->R16, U->G16,\n Y1->B16, and V->A16.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":910},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":66587,"byte_end":66591,"line_start":1024,"line_end":1024,"column_start":9,"column_end":13},"name":"Nv11","qualname":"::flags::format::Format::Nv11","value":"Format::Nv11","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" Most common planar YUV 4:1:1 video resource format. Valid luminance\n data view formats for this video resource format are\n [R8Unorm](#variant.R8Unorm) and [R8Uint](#variant.R8Uint). Valid\n chrominance data view formats (width and height are each 1/4 of\n luminance view) for this video resource format are\n [R8G8Unorm](#variant.R8G8Unorm) and [R8G8Uint](#variant.R8G8Uint).\n Supported view types are SRV, RTV, and UAV. For luminance data\n view, the mapping to the view channel is Y->R8. For chrominance\n data view, the mapping to the view channel is U->R8 and V->G8.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":913},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":67036,"byte_end":67040,"line_start":1034,"line_end":1034,"column_start":9,"column_end":13},"name":"Ai44","qualname":"::flags::format::Format::Ai44","value":"Format::Ai44","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" 4-bit palletized YUV format that is commonly used for DVD subpicture.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":916},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":67485,"byte_end":67489,"line_start":1044,"line_end":1044,"column_start":9,"column_end":13},"name":"Ia44","qualname":"::flags::format::Format::Ia44","value":"Format::Ia44","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" 4-bit palletized YUV format that is commonly used for DVD subpicture.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":919},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":68060,"byte_end":68062,"line_start":1056,"line_end":1056,"column_start":9,"column_end":11},"name":"P8","qualname":"::flags::format::Format::P8","value":"Format::P8","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" 8-bit palletized format that is used for palletized RGB data when\n the processor processes ISDB-T data and for palletized YUV data\n when the processor processes BluRay data.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":922},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":68573,"byte_end":68577,"line_start":1067,"line_end":1067,"column_start":9,"column_end":13},"name":"A8P8","qualname":"::flags::format::Format::A8P8","value":"Format::A8P8","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" 8-bit palletized format with 8 bits of alpha that is used for\n palletized YUV data when the processor processes BluRay data.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":925},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":68821,"byte_end":68834,"line_start":1073,"line_end":1073,"column_start":9,"column_end":22},"name":"B4G4R4A4Unorm","qualname":"::flags::format::Format::B4G4R4A4Unorm","value":"Format::B4G4R4A4Unorm","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A four-component, 16-bit unsigned-normalized integer format that\n supports 4 bits for each channel including alpha.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":928},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":68929,"byte_end":68933,"line_start":1076,"line_end":1076,"column_start":9,"column_end":13},"name":"P208","qualname":"::flags::format::Format::P208","value":"Format::P208","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" A video format; an 8-bit version of a hybrid planar 4:2:2 format.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":931},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":69000,"byte_end":69004,"line_start":1079,"line_end":1079,"column_start":9,"column_end":13},"name":"V208","qualname":"::flags::format::Format::V208","value":"Format::V208","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" An 8 bit YCbCrA 4:4 rendering format.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":934},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":69075,"byte_end":69079,"line_start":1082,"line_end":1082,"column_start":9,"column_end":13},"name":"V408","qualname":"::flags::format::Format::V408","value":"Format::V408","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" An 8 bit YCbCrA 4:4:4:4 rendering format.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":579},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":24845,"byte_end":24851,"line_start":172,"line_end":172,"column_start":14,"column_end":20},"name":"Format","qualname":"::flags::format::Format","value":"pub enum Format {\n\n    #[doc = r\" The format is not known.\"]\n    Unknown = ,\n\n    #[doc =\n      r\" A four-component, 128-bit typeless format that supports 32 bits per\"]\n    #[doc = r\" channel including alpha.\"]\n    #[doc = r\" <sup>[1](#restrictions-and-notes-on-formats)</sup>\"]\n    R32G32B32A32Typeless = ,\n\n    #[doc =\n      r\" A four-component, 128-bit floating-point format that supports 32\"]\n    #[doc = r\" bits per channel including alpha.\"]\n    #[doc = r\" <sup>[1,5,8](#restrictions-and-notes-on-formats)</sup>\"]\n    R32G32B32A32Float = ,\n\n    #[doc =\n      r\" A four-component, 128-bit unsigned-integer format that supports 32\"]\n    #[doc = r\" bits per channel including alpha.\"]\n    #[doc = r\" <sup>[1](#restrictions-and-notes-on-formats)</sup>\"]\n    R32G32B32A32Uint = ,\n\n    #[doc =\n      r\" A four-component, 128-bit signed-integer format that supports 32\"]\n    #[doc = r\" bits per channel including alpha.\"]\n    #[doc = r\" <sup>[1](#restrictions-and-notes-on-formats)</sup>\"]\n    R32G32B32A32Sint = ,\n\n    #[doc =\n      r\" A three-component, 96-bit typeless format that supports 32 bits per\"]\n    #[doc = r\" color channel.\"]\n    R32G32B32Typeless = ,\n\n    #[doc =\n      r\" A three-component, 96-bit floating-point format that supports 32\"]\n    #[doc = r\" bits per color channel.\"]\n    #[doc = r\" <sup>[5,8](#restrictions-and-notes-on-formats)</sup>\"]\n    R32G32B32Float = ,\n\n    #[doc =\n      r\" A three-component, 96-bit unsigned-integer format that supports 32\"]\n    #[doc = r\" bits per color channel.\"]\n    R32G32B32Uint = ,\n\n    #[doc =\n      r\" A three-component, 96-bit signed-integer format that supports 32\"]\n    #[doc = r\" bits per color channel.\"]\n    R32G32B32Sint = ,\n\n    #[doc =\n      r\" A four-component, 64-bit typeless format that supports 16 bits per\"]\n    #[doc = r\" channel including alpha.\"]\n    R16G16B16A16Typeless = ,\n\n    #[doc =\n      r\" A four-component, 64-bit floating-point format that supports 16\"]\n    #[doc = r\" bits per channel including alpha.\"]\n    #[doc = r\" <sup>[5,7](#restrictions-and-notes-on-formats)</sup>\"]\n    R16G16B16A16Float = ,\n\n    #[doc =\n      r\" A four-component, 64-bit unsigned-normalized-integer format that\"]\n    #[doc = r\" supports 16 bits per channel including alpha.\"]\n    R16G16B16A16Unorm = ,\n\n    #[doc =\n      r\" A four-component, 64-bit unsigned-integer format that supports 16\"]\n    #[doc = r\" bits per channel including alpha.\"]\n    R16G16B16A16Uint = ,\n\n    #[doc =\n      r\" A four-component, 64-bit signed-normalized-integer format that\"]\n    #[doc = r\" supports 16 bits per channel including alpha.\"]\n    R16G16B16A16Snorm = ,\n\n    #[doc =\n      r\" A four-component, 64-bit signed-integer format that supports 16\"]\n    #[doc = r\" bits per channel including alpha.\"]\n    R16G16B16A16Sint = ,\n\n    #[doc =\n      r\" A two-component, 64-bit typeless format that supports 32 bits for\"]\n    #[doc = r\" the red channel and 32 bits for the green channel.\"]\n    R32G32Typeless = ,\n\n    #[doc =\n      r\" A two-component, 64-bit floating-point format that supports 32 bits\"]\n    #[doc = r\" for the red channel and 32 bits for the green channel.\"]\n    #[doc = r\" <sup>[5,8](#restrictions-and-notes-on-formats)</sup>\"]\n    R32G32Float = ,\n\n    #[doc =\n      r\" A two-component, 64-bit unsigned-integer format that supports 32\"]\n    #[doc = r\" bits for the red channel and 32 bits for the green channel.\"]\n    R32G32Uint = ,\n\n    #[doc =\n      r\" A two-component, 64-bit signed-integer format that supports 32 bits\"]\n    #[doc = r\" for the red channel and 32 bits for the green channel.\"]\n    R32G32Sint = ,\n\n    #[doc =\n      r\" A two-component, 64-bit typeless format that supports 32 bits for\"]\n    #[doc =\n      r\" the red channel, 8 bits for the green channel, and 24 bits are unused.\"]\n    R32G8X24Typeless = ,\n\n    #[doc = r\" A 32-bit floating-point component, and two unsigned-integer\"]\n    #[doc = r\" components (with an additional 32 bits). This format supports\"]\n    #[doc = r\" 32-bit depth, 8-bit stencil, and 24 bits are unused.\"]\n    #[doc = r\" <sup>[5](#restrictions-and-notes-on-formats)</sup>\"]\n    D32FloatS8X24Uint = ,\n\n    #[doc =\n      r\" A 32-bit floating-point component, and two typeless components\"]\n    #[doc = r\" (with an additional 32 bits). This format supports 32-bit red\"]\n    #[doc = r\" channel, 8 bits are unused, and 24 bits are unused.\"]\n    #[doc = r\" <sup>[5](#restrictions-and-notes-on-formats)</sup>\"]\n    R32FloatX8X24Typeless = ,\n\n    #[doc =\n      r\" A 32-bit typeless component, and two unsigned-integer components\"]\n    #[doc =\n      r\" (with an additional 32 bits). This format has 32 bits unused, 8\"]\n    #[doc = r\" bits for green channel, and 24 bits are unused.\"]\n    X32TypelessG8X24Uint = ,\n\n    #[doc =\n      r\" A four-component, 32-bit typeless format that supports 10 bits for\"]\n    #[doc = r\" each color and 2 bits for alpha.\"]\n    R10G10B10A2Typeless = ,\n\n    #[doc =\n      r\" A four-component, 32-bit unsigned-normalized-integer format that\"]\n    #[doc = r\" supports 10 bits for each color and 2 bits for alpha.\"]\n    R10G10B10A2Unorm = ,\n\n    #[doc =\n      r\" A four-component, 32-bit unsigned-integer format that supports 10\"]\n    #[doc = r\" bits for each color and 2 bits for alpha.\"]\n    R10G10B10A2Uint = ,\n\n    #[doc =\n      r\" Three partial-precision floating-point numbers encoded into a single\"]\n    #[doc =\n      r\" 32-bit value (a variant of s10e5, which is sign bit, 10-bit mantissa,\"]\n    #[doc =\n      r\" and 5-bit biased (15) exponent). There are no sign bits, and there\"]\n    #[doc =\n      r\" is a 5-bit biased (15) exponent for each channel, 6-bit mantissa for\"]\n    #[doc =\n      r\" R and G, and a 5-bit mantissa for B, as shown in the following\"]\n    #[doc = r\" illustration.\"]\n    #[doc = r\" <sup>[5,7](#restrictions-and-notes-on-formats)</sup>\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" ![Illustration of the bits in three partial-precision floating point numbers][1]\"]\n    #[doc = r\"\"]\n    #[doc = r\" [1]: https://msdn.microsoft.com/dynimg/IC534131.png\"]\n    R11G11B10Float = ,\n\n    #[doc =\n      r\" A four-component, 32-bit typeless format that supports 8 bits per\"]\n    #[doc = r\" channel including alpha.\"]\n    R8G8B8A8Typeless = ,\n\n    #[doc =\n      r\" A four-component, 32-bit unsigned-normalized-integer format that\"]\n    #[doc = r\" supports 8 bits per channel including alpha.\"]\n    R8G8B8A8Unorm = ,\n\n    #[doc =\n      r\" A four-component, 32-bit unsigned-normalized integer sRGB format\"]\n    #[doc = r\" that supports 8 bits per channel including alpha.\"]\n    R8G8B8A8UnormSrgb = ,\n\n    #[doc =\n      r\" A four-component, 32-bit unsigned-integer format that supports 8\"]\n    #[doc = r\" bits per channel including alpha.\"]\n    R8G8B8A8Uint = ,\n\n    #[doc =\n      r\" A four-component, 32-bit signed-normalized-integer format that\"]\n    #[doc = r\" supports 8 bits per channel including alpha.\"]\n    R8G8B8A8Snorm = ,\n\n    #[doc =\n      r\" A four-component, 32-bit signed-integer format that supports 8\"]\n    #[doc = r\" bits per channel including alpha.\"]\n    R8G8B8A8Sint = ,\n\n    #[doc =\n      r\" A two-component, 32-bit typeless format that supports 16 bits for\"]\n    #[doc = r\" the red channel and 16 bits for the green channel.\"]\n    R16G16Typeless = ,\n\n    #[doc =\n      r\" A two-component, 32-bit floating-point format that supports 16\"]\n    #[doc = r\" bits for the red channel and 16 bits for the green channel.\"]\n    #[doc = r\" <sup>[5,7](#restrictions-and-notes-on-formats)</sup>\"]\n    R16G16Float = ,\n\n    #[doc =\n      r\" A two-component, 32-bit unsigned-normalized-integer format that\"]\n    #[doc = r\" supports 16 bits each for the green and red channels.\"]\n    R16G16Unorm = ,\n\n    #[doc =\n      r\" A two-component, 32-bit unsigned-integer format that supports 16\"]\n    #[doc = r\" bits for the red channel and 16 bits for the green channel.\"]\n    R16G16Uint = ,\n\n    #[doc = r\" A two-component, 32-bit signed-normalized-integer format that\"]\n    #[doc =\n      r\" supports 16 bits for the red channel and 16 bits for the green\"]\n    #[doc = r\" channel.\"]\n    R16G16Snorm = ,\n\n    #[doc =\n      r\" A two-component, 32-bit signed-integer format that supports 16\"]\n    #[doc = r\" bits for the red channel and 16 bits for the green channel.\"]\n    R16G16Sint = ,\n\n    #[doc =\n      r\" A single-component, 32-bit typeless format that supports 32 bits\"]\n    #[doc = r\" for the red channel.\"]\n    R32Typeless = ,\n\n    #[doc =\n      r\" A single-component, 32-bit floating-point format that supports 32\"]\n    #[doc = r\" bits for depth.\"]\n    #[doc = r\" <sup>[5,8](#restrictions-and-notes-on-formats)</sup>\"]\n    D32Float = ,\n\n    #[doc =\n      r\" A single-component, 32-bit floating-point format that supports 32\"]\n    #[doc = r\" bits for the red channel.\"]\n    #[doc = r\" <sup>[5,8](#restrictions-and-notes-on-formats)</sup>\"]\n    R32Float = ,\n\n    #[doc =\n      r\" A single-component, 32-bit unsigned-integer format that supports 32\"]\n    #[doc = r\" bits for the red channel.\"]\n    R32Uint = ,\n\n    #[doc =\n      r\" A single-component, 32-bit signed-integer format that supports 32\"]\n    #[doc = r\" bits for the red channel.\"]\n    R32Sint = ,\n\n    #[doc =\n      r\" A two-component, 32-bit typeless format that supports 24 bits for\"]\n    #[doc = r\" the red channel and 8 bits for the green channel.\"]\n    R24G8Typeless = ,\n\n    #[doc =\n      r\" A 32-bit z-buffer format that supports 24 bits for depth and 8 bits\"]\n    #[doc = r\" for stencil.\"]\n    D24UnormS8Uint = ,\n\n    #[doc = r\" A 32-bit format, that contains a 24 bit, single-component,\"]\n    #[doc =\n      r\" unsigned-normalized integer, with an additional typeless 8 bits.\"]\n    #[doc = r\" This format has 24 bits red channel and 8 bits unused.\"]\n    R24UnormX8Typeless = ,\n\n    #[doc =\n      r\" A 32-bit format, that contains a 24 bit, single-component, typeless\"]\n    #[doc =\n      r\" format, with an additional 8 bit unsigned integer component. This\"]\n    #[doc = r\" format has 24 bits unused and 8 bits green channel.\"]\n    X24TypelessG8Uint = ,\n\n    #[doc =\n      r\" A two-component, 16-bit typeless format that supports 8 bits for\"]\n    #[doc = r\" the red channel and 8 bits for the green channel.\"]\n    R8G8Typeless = ,\n\n    #[doc =\n      r\" A two-component, 16-bit unsigned-normalized-integer format that\"]\n    #[doc = r\" supports 8 bits for the red channel and 8 bits for the green\"]\n    #[doc = r\" channel.\"]\n    R8G8Unorm = ,\n\n    #[doc =\n      r\" A two-component, 16-bit unsigned-integer format that supports 8\"]\n    #[doc = r\" bits for the red channel and 8 bits for the green channel.\"]\n    R8G8Uint = ,\n\n    #[doc = r\" A two-component, 16-bit signed-normalized-integer format that\"]\n    #[doc = r\" supports 8 bits for the red channel and 8 bits for the green\"]\n    #[doc = r\" channel.\"]\n    R8G8Snorm = ,\n\n    #[doc =\n      r\" A two-component, 16-bit signed-integer format that supports 8 bits\"]\n    #[doc = r\" for the red channel and 8 bits for the green channel.\"]\n    R8G8Sint = ,\n\n    #[doc =\n      r\" A single-component, 16-bit typeless format that supports 16 bits\"]\n    #[doc = r\" for the red channel.\"]\n    R16Typeless = ,\n\n    #[doc =\n      r\" A single-component, 16-bit floating-point format that supports 16\"]\n    #[doc = r\" bits for the red channel.\"]\n    #[doc = r\" <sup>[5,7](#restrictions-and-notes-on-formats)</sup>\"]\n    R16Float = ,\n\n    #[doc =\n      r\" A single-component, 16-bit unsigned-normalized-integer format that\"]\n    #[doc = r\" supports 16 bits for depth.\"]\n    D16Unorm = ,\n\n    #[doc =\n      r\" A single-component, 16-bit unsigned-normalized-integer format that\"]\n    #[doc = r\" supports 16 bits for the red channel.\"]\n    R16Unorm = ,\n\n    #[doc =\n      r\" A single-component, 16-bit unsigned-integer format that supports\"]\n    #[doc = r\" 16 bits for the red channel.\"]\n    R16Uint = ,\n\n    #[doc =\n      r\" A single-component, 16-bit signed-normalized-integer format that\"]\n    #[doc = r\" supports 16 bits for the red channel.\"]\n    R16Snorm = ,\n\n    #[doc =\n      r\" A single-component, 16-bit signed-integer format that supports 16\"]\n    #[doc = r\" bits for the red channel.\"]\n    R16Sint = ,\n\n    #[doc =\n      r\" A single-component, 8-bit typeless format that supports 8 bits for\"]\n    #[doc = r\" the red channel.\"]\n    R8Typeless = ,\n\n    #[doc =\n      r\" A single-component, 8-bit unsigned-normalized-integer format that\"]\n    #[doc = r\" supports 8 bits for the red channel.\"]\n    R8Unorm = ,\n\n    #[doc =\n      r\" A single-component, 8-bit unsigned-integer format that supports 8\"]\n    #[doc = r\" bits for the red channel.\"]\n    R8Uint = ,\n\n    #[doc =\n      r\" A single-component, 8-bit signed-normalized-integer format that\"]\n    #[doc = r\" supports 8 bits for the red channel.\"]\n    R8Snorm = ,\n\n    #[doc =\n      r\" A single-component, 8-bit signed-integer format that supports 8\"]\n    #[doc = r\" bits for the red channel.\"]\n    R8Sint = ,\n\n    #[doc =\n      r\" A single-component, 8-bit unsigned-normalized-integer format for\"]\n    #[doc = r\" alpha only.\"]\n    A8Unorm = ,\n\n    #[doc =\n      r\" A single-component, 1-bit unsigned-normalized integer format that\"]\n    #[doc = r\" supports 1 bit for the red channel.\"]\n    #[doc = r\" <sup>[2](#restrictions-and-notes-on-formats)</sup>\"]\n    R1Unorm = ,\n\n    #[doc = r\" Three partial-precision floating-point numbers encoded into a\"]\n    #[doc =\n      r\" single 32-bit value all sharing the same 5-bit exponent (variant\"]\n    #[doc =\n      r\" of s10e5, which is sign bit, 10-bit mantissa, and 5-bit biased\"]\n    #[doc =\n      r\" (15) exponent). There is no sign bit, and there is a shared 5-bit\"]\n    #[doc =\n      r\" biased (15) exponent and a 9-bit mantissa for each channel, as\"]\n    #[doc = r\" shown in the following illustration.\"]\n    #[doc = r\" <sup>[2,6,7](#restrictions-and-notes-on-formats)</sup>\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" ![Illustration of the bits in the three partial-precision floating-point numbers][1]\"]\n    #[doc = r\"\"]\n    #[doc = r\" [1]: https://msdn.microsoft.com/dynimg/IC534132.png\"]\n    R9G9B9E5SharedExponent = ,\n\n    #[doc =\n      r\" A four-component, 32-bit unsigned-normalized-integer format. This\"]\n    #[doc =\n      r\" packed RGB format is analogous to the UYVY format. Each 32-bit\"]\n    #[doc =\n      r\" block describes a pair of pixels: (R8, G8, B8) and (R8, G8, B8)\"]\n    #[doc =\n      r\" where the R8/B8 values are repeated, and the G8 values are unique\"]\n    #[doc = r\" to each pixel.\"]\n    #[doc = r\" <sup>[3](#restrictions-and-notes-on-formats)</sup>\"]\n    #[doc = r\"\"]\n    #[doc = r\" Width must be even.\"]\n    #[allow(non_camel_case_types)]\n    R8G8_B8G8Unorm = ,\n\n    #[doc =\n      r\" A four-component, 32-bit unsigned-normalized-integer format. This\"]\n    #[doc =\n      r\" packed RGB format is analogous to the YUY2 format. Each 32-bit\"]\n    #[doc =\n      r\" block describes a pair of pixels: (R8, G8, B8) and (R8, G8, B8)\"]\n    #[doc =\n      r\" where the R8/B8 values are repeated, and the G8 values are unique\"]\n    #[doc = r\" to each pixel.\"]\n    #[doc = r\" <sup>[3](#restrictions-and-notes-on-formats)</sup>\"]\n    #[doc = r\"\"]\n    #[doc = r\" Width must be even.\"]\n    #[allow(non_camel_case_types)]\n    G8R8_G8B8Unorm = ,\n\n    #[doc = r\" Four-component typeless block-compression format.\"]\n    #[doc = r\" For information about block-compression formats, see\"]\n    #[doc = r\" [Texture Block Compression in Direct3D 11.][1]\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" [1]: https://msdn.microsoft.com/en-us/library/windows/desktop/hh308955(v=vs.85).aspx\"]\n    Bc1Typeless = ,\n\n    #[doc = r\" Four-component block-compression format.\"]\n    #[doc = r\" For information about block-compression formats, see\"]\n    #[doc = r\" [Texture Block Compression in Direct3D 11.][1]\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" [1]: https://msdn.microsoft.com/en-us/library/windows/desktop/hh308955(v=vs.85).aspx\"]\n    Bc1Unorm = ,\n\n    #[doc = r\" Four-component block-compression format for sRGB data.\"]\n    #[doc = r\" For information about block-compression formats, see\"]\n    #[doc = r\" [Texture Block Compression in Direct3D 11.][1]\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" [1]: https://msdn.microsoft.com/en-us/library/windows/desktop/hh308955(v=vs.85).aspx\"]\n    Bc1UnormSrgb = ,\n\n    #[doc = r\" Four-component typeless block-compression format.\"]\n    #[doc = r\" For information about block-compression formats, see\"]\n    #[doc = r\" [Texture Block Compression in Direct3D 11.][1]\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" [1]: https://msdn.microsoft.com/en-us/library/windows/desktop/hh308955(v=vs.85).aspx\"]\n    Bc2Typeless = ,\n\n    #[doc = r\" Four-component block-compression format.\"]\n    #[doc = r\" For information about block-compression formats, see\"]\n    #[doc = r\" [Texture Block Compression in Direct3D 11.][1]\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" [1]: https://msdn.microsoft.com/en-us/library/windows/desktop/hh308955(v=vs.85).aspx\"]\n    Bc2Unorm = ,\n\n    #[doc = r\" Four-component block-compression format for sRGB data.\"]\n    #[doc = r\" For information about block-compression formats, see\"]\n    #[doc = r\" [Texture Block Compression in Direct3D 11.][1]\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" [1]: https://msdn.microsoft.com/en-us/library/windows/desktop/hh308955(v=vs.85).aspx\"]\n    Bc2UnormSrgb = ,\n\n    #[doc = r\" Four-component typeless block-compression format.\"]\n    #[doc = r\" For information about block-compression formats, see\"]\n    #[doc = r\" [Texture Block Compression in Direct3D 11.][1]\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" [1]: https://msdn.microsoft.com/en-us/library/windows/desktop/hh308955(v=vs.85).aspx\"]\n    Bc3Typeless = ,\n\n    #[doc = r\" Four-component block-compression format.\"]\n    #[doc = r\" For information about block-compression formats, see\"]\n    #[doc = r\" [Texture Block Compression in Direct3D 11.][1]\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" [1]: https://msdn.microsoft.com/en-us/library/windows/desktop/hh308955(v=vs.85).aspx\"]\n    Bc3Unorm = ,\n\n    #[doc = r\" Four-component block-compression format for sRGB data.\"]\n    #[doc = r\" For information about block-compression formats, see\"]\n    #[doc = r\" [Texture Block Compression in Direct3D 11.][1]\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" [1]: https://msdn.microsoft.com/en-us/library/windows/desktop/hh308955(v=vs.85).aspx\"]\n    Bc3UnormSrgb = ,\n\n    #[doc = r\" One-component typeless block-compression format.\"]\n    #[doc = r\" For information about block-compression formats, see\"]\n    #[doc = r\" [Texture Block Compression in Direct3D 11.][1]\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" [1]: https://msdn.microsoft.com/en-us/library/windows/desktop/hh308955(v=vs.85).aspx\"]\n    Bc4Typeless = ,\n\n    #[doc = r\" One-component block-compression format.\"]\n    #[doc = r\" For information about block-compression formats, see\"]\n    #[doc = r\" [Texture Block Compression in Direct3D 11.][1]\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" [1]: https://msdn.microsoft.com/en-us/library/windows/desktop/hh308955(v=vs.85).aspx\"]\n    Bc4Unorm = ,\n\n    #[doc = r\" One-component block-compression format.\"]\n    #[doc = r\" For information about block-compression formats, see\"]\n    #[doc = r\" [Texture Block Compression in Direct3D 11.][1]\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" [1]: https://msdn.microsoft.com/en-us/library/windows/desktop/hh308955(v=vs.85).aspx\"]\n    Bc4Snorm = ,\n\n    #[doc = r\" Two-component typeless block-compression format.\"]\n    #[doc = r\" For information about block-compression formats, see\"]\n    #[doc = r\" [Texture Block Compression in Direct3D 11.][1]\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" [1]: https://msdn.microsoft.com/en-us/library/windows/desktop/hh308955(v=vs.85).aspx\"]\n    Bc5Typeless = ,\n\n    #[doc = r\" Two-component block-compression format.\"]\n    #[doc = r\" For information about block-compression formats, see\"]\n    #[doc = r\" [Texture Block Compression in Direct3D 11.][1]\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" [1]: https://msdn.microsoft.com/en-us/library/windows/desktop/hh308955(v=vs.85).aspx\"]\n    Bc5Unorm = ,\n\n    #[doc = r\" Two-component block-compression format.\"]\n    #[doc = r\" For information about block-compression formats, see\"]\n    #[doc = r\" [Texture Block Compression in Direct3D 11.][1]\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" [1]: https://msdn.microsoft.com/en-us/library/windows/desktop/hh308955(v=vs.85).aspx\"]\n    Bc5Snorm = ,\n\n    #[doc =\n      r\" A three-component, 16-bit unsigned-normalized-integer format that\"]\n    #[doc =\n      r\" supports 5 bits for blue, 6 bits for green, and 5 bits for red.\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" **Direct3D 10 through Direct3D 11:** This value is defined for\"]\n    #[doc =\n      r\" DXGI. However, Direct3D 10, 10.1, or 11 devices do not support\"]\n    #[doc = r\" this format.\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" **Direct3D 11.1:** This value is not supported until Windows 8.\"]\n    B5G6R5Unorm = ,\n\n    #[doc =\n      r\" A four-component, 16-bit unsigned-normalized-integer format that\"]\n    #[doc = r\" supports 5 bits for each color channel and 1-bit alpha.\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" **Direct3D 10 through Direct3D 11:** This value is defined for\"]\n    #[doc =\n      r\" DXGI. However, Direct3D 10, 10.1, or 11 devices do not support\"]\n    #[doc = r\" this format.\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" **Direct3D 11.1:** This value is not supported until Windows 8.\"]\n    B5G5R5A1Unorm = ,\n\n    #[doc =\n      r\" A four-component, 32-bit unsigned-normalized-integer format that\"]\n    #[doc = r\" supports 8 bits for each color channel and 8-bit alpha.\"]\n    B8G8R8A8Unorm = ,\n\n    #[doc =\n      r\" A four-component, 32-bit unsigned-normalized-integer format that\"]\n    #[doc = r\" supports 8 bits for each color channel and 8 bits unused.\"]\n    B8G8R8X8Unorm = ,\n\n    #[doc = r\" A four-component, 32-bit 2.8-biased fixed-point format that\"]\n    #[doc = r\" supports 10 bits for each color channel and 2-bit alpha.\"]\n    R10G10B10XrBiasA2Unorm = ,\n\n    #[doc = r\" A four-component, 32-bit typeless format that supports 8 bits\"]\n    #[doc = r\" for each channel including alpha.\"]\n    #[doc = r\" <sup>[4](#restrictions-and-notes-on-formats)</sup>\"]\n    B8G8R8A8Typeless = ,\n\n    #[doc =\n      r\" A four-component, 32-bit unsigned-normalized standard RGB format\"]\n    #[doc = r\" that supports 8 bits for each channel including alpha.\"]\n    #[doc = r\" <sup>[3](#restrictions-and-notes-on-formats)</sup>\"]\n    B8G8R8A8UnormSrgb = ,\n\n    #[doc =\n      r\" A four-component, 32-bit typeless format that supports 8 bits for\"]\n    #[doc = r\" each color channel, and 8 bits are unused.\"]\n    #[doc = r\" <sup>[3](#restrictions-and-notes-on-formats)</sup>\"]\n    B8G8R8X8Typeless = ,\n\n    #[doc =\n      r\" A four-component, 32-bit unsigned-normalized standard RGB format\"]\n    #[doc =\n      r\" that supports 8 bits for each color channel, and 8 bits are unused.\"]\n    #[doc = r\" <sup>[3](#restrictions-and-notes-on-formats)</sup>\"]\n    B8G8R8X8UnormSrgb = ,\n\n    #[doc = r\" A typeless block-compression format.\"]\n    #[doc = r\" <sup>[4](#restrictions-and-notes-on-formats)</sup>\"]\n    #[doc = r\" For information about block-compression formats, see\"]\n    #[doc = r\" [Texture Block Compression in Direct3D 11.][1]\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" [1]: https://msdn.microsoft.com/en-us/library/windows/desktop/hh308955(v=vs.85).aspx\"]\n    Bc6hTypeless = ,\n\n    #[doc = r\" A block-compression format.\"]\n    #[doc = r\" <sup>[4](#restrictions-and-notes-on-formats)</sup>\"]\n    #[doc = r\" For information about block-compression formats, see\"]\n    #[doc = r\" [Texture Block Compression in Direct3D 11.][1]\"]\n    #[doc = r\" <sup>[5](#restrictions-and-notes-on-formats)</sup>\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" [1]: https://msdn.microsoft.com/en-us/library/windows/desktop/hh308955(v=vs.85).aspx\"]\n    Bc6hUf16 = ,\n\n    #[doc = r\" A block-compression format.\"]\n    #[doc = r\" <sup>[4](#restrictions-and-notes-on-formats)</sup>\"]\n    #[doc = r\" For information about block-compression formats, see\"]\n    #[doc = r\" [Texture Block Compression in Direct3D 11.][1]\"]\n    #[doc = r\" <sup>[5](#restrictions-and-notes-on-formats)</sup>\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" [1]: https://msdn.microsoft.com/en-us/library/windows/desktop/hh308955(v=vs.85).aspx\"]\n    Bc6hSf16 = ,\n\n    #[doc = r\" A typeless block-compression format.\"]\n    #[doc = r\" <sup>[4](#restrictions-and-notes-on-formats)</sup>\"]\n    #[doc = r\" For information about block-compression formats, see\"]\n    #[doc = r\" [Texture Block Compression in Direct3D 11.][1]\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" [1]: https://msdn.microsoft.com/en-us/library/windows/desktop/hh308955(v=vs.85).aspx\"]\n    Bc7Typeless = ,\n\n    #[doc = r\" A block-compression format.\"]\n    #[doc = r\" <sup>[4](#restrictions-and-notes-on-formats)</sup>\"]\n    #[doc = r\" For information about block-compression formats, see\"]\n    #[doc = r\" [Texture Block Compression in Direct3D 11.][1]\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" [1]: https://msdn.microsoft.com/en-us/library/windows/desktop/hh308955(v=vs.85).aspx\"]\n    Bc7Unorm = ,\n\n    #[doc = r\" A block-compression format.\"]\n    #[doc = r\" <sup>[4](#restrictions-and-notes-on-formats)</sup>\"]\n    #[doc = r\" For information about block-compression formats, see\"]\n    #[doc = r\" [Texture Block Compression in Direct3D 11.][1]\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" [1]: https://msdn.microsoft.com/en-us/library/windows/desktop/hh308955(v=vs.85).aspx\"]\n    Bc7UnormSrgb = ,\n\n    #[doc =\n      r\" Most common YUV 4:4:4 video resource format. Valid view formats\"]\n    #[doc = r\" for this video resource format are\"]\n    #[doc = r\" [R8G8B8A8Unorm](#variant.R8G8B8A8Unorm) and\"]\n    #[doc =\n      r\" [R8G8B8A8Uint](#variant.R8G8B8A8Uint). For UAVs, an additional\"]\n    #[doc = r\" valid view format is [R32Uint](#variant.R32Uint). By using\"]\n    #[doc =\n      r\" [R32Uint](#variant.R32Uint) for UAVs, you can both read and write\"]\n    #[doc =\n      r\" as opposed to just write for [R8G8B8A8Unorm](#variant.R8G8B8A8Unorm)\"]\n    #[doc =\n      r\" and [R8G8B8A8Uint](#variant.R8G8B8A8Uint). Supported view types are\"]\n    #[doc =\n      r\" SRV, RTV, and UAV. One view provides a straightforward mapping of\"]\n    #[doc =\n      r\" the entire surface. The mapping to the view channel is V->R8, U->G8,\"]\n    #[doc = r\" Y->B8, and A->A8.\"]\n    #[doc = r\"\"]\n    #[doc = r\" For more info about YUV formats for video rendering, see\"]\n    #[doc = r\" [Recommended 8-Bit YUV Formats for Video Rendering.][1]\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" **Direct3D 11.1:** This value is not supported until Windows 8.\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" [1]: https://msdn.microsoft.com/en-us/library/windows/desktop/dd206750(v=vs.85).aspx\"]\n    Ayuv = ,\n\n    #[doc =\n      r\" 10-bit per channel packed YUV 4:4:4 video resource format. Valid\"]\n    #[doc = r\" view formats for this video resource format are\"]\n    #[doc = r\" [R10G10B10A2Unorm](#variant.R10G10B10A2Unorm) and\"]\n    #[doc =\n      r\" [R10G10B10A2Uint](#variant.R10G10B10A2Uint). For UAVs, an additional\"]\n    #[doc = r\" valid view format is [R32Uint](#variant.R32Uint). By using\"]\n    #[doc =\n      r\" [R32Uint](#variant.R32Uint) for UAVs, you can both read and write as\"]\n    #[doc =\n      r\" opposed to just write for [R10G10B10A2Unorm](#variant.R10G10B10A2Unorm)\"]\n    #[doc =\n      r\" and [R10G10B10A2Uint](#variant.R10G10B10A2Uint). Supported view types\"]\n    #[doc =\n      r\" are SRV and UAV. One view provides a straightforward mapping of the\"]\n    #[doc =\n      r\" entire surface. The mapping to the view channel is U->R10, Y->G10,\"]\n    #[doc = r\" V->B10, and A->A2.\"]\n    #[doc = r\"\"]\n    #[doc = r\" For more info about YUV formats for video rendering, see\"]\n    #[doc = r\" [Recommended 8-Bit YUV Formats for Video Rendering.][1]\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" **Direct3D 11.1:** This value is not supported until Windows 8.\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" [1]: https://msdn.microsoft.com/en-us/library/windows/desktop/dd206750(v=vs.85).aspx\"]\n    Y410 = ,\n\n    #[doc =\n      r\" 16-bit per channel packed YUV 4:4:4 video resource format. Valid\"]\n    #[doc = r\" view formats for this video resource format are\"]\n    #[doc = r\" [R16G16B16A16Unorm](#variant.R16G16B16A16Unorm) and\"]\n    #[doc =\n      r\" [R16G16B16A16Uint](#variant.R16G16B16A16Uint). Supported view types\"]\n    #[doc =\n      r\" are SRV and UAV. One view provides a straightforward mapping of the\"]\n    #[doc =\n      r\" entire surface. The mapping to the view channel is U->R16, Y->G16,\"]\n    #[doc = r\" V->B16, and A->A16.\"]\n    #[doc = r\"\"]\n    #[doc = r\" For more info about YUV formats for video rendering, see\"]\n    #[doc = r\" [Recommended 8-Bit YUV Formats for Video Rendering.][1]\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" **Direct3D 11.1:** This value is not supported until Windows 8.\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" [1]: https://msdn.microsoft.com/en-us/library/windows/desktop/dd206750(v=vs.85).aspx\"]\n    Y416 = ,\n\n    #[doc =\n      r\" Most common YUV 4:2:0 video resource format. Valid luminance data\"]\n    #[doc = r\" view formats for this video resource format are\"]\n    #[doc =\n      r\" [R8Unorm](#variant.R8Unorm) and [R8Uint](#variant.R8Uint). Valid\"]\n    #[doc =\n      r\" chrominance data view formats (width and height are each 1/2 of\"]\n    #[doc = r\" luminance view) for this video resource format are\"]\n    #[doc =\n      r\" [R8G8Unorm](#variant.R8G8Unorm) and [R8G8Uint](#variant.R8G8Uint).\"]\n    #[doc =\n      r\" Supported view types are SRV, RTV, and UAV. For luminance data view,\"]\n    #[doc =\n      r\" the mapping to the view channel is Y->R8. For chrominance data view,\"]\n    #[doc = r\" the mapping to the view channel is U->R8 and V->G8.\"]\n    #[doc = r\"\"]\n    #[doc = r\" For more info about YUV formats for video rendering, see\"]\n    #[doc = r\" [Recommended 8-Bit YUV Formats for Video Rendering.][1]\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" Width and height must be even. Direct3D 11 staging resources and\"]\n    #[doc = r\" initData parameters for this format use\"]\n    #[doc = r\" `(rowPitch * (height + (height / 2)))` bytes. The first\"]\n    #[doc = r\" `(SysMemPitch * height)` bytes are the Y plane, the remaining\"]\n    #[doc = r\" `(SysMemPitch * (height / 2))` bytes are the UV plane.\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" An app using the YUY 4:2:0 formats must map the luma (Y) plane\"]\n    #[doc = r\" separately from the chroma (UV) planes. Developers do this by\"]\n    #[doc =\n      r\" calling [ID3D12Device::CreateShaderResourceView][2] twice for the\"]\n    #[doc = r\" same texture and passing in 1-channel and 2-channel formats.\"]\n    #[doc =\n      r\" Passing in a 1-channel format compatible with the Y plane maps\"]\n    #[doc =\n      r\" only the Y plane. Passing in a 2-channel format compatible with\"]\n    #[doc =\n      r\" the UV planes (together) maps only the U and V planes as a single\"]\n    #[doc = r\" resource view.\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" **Direct3D 11.1:** This value is not supported until Windows 8.\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" [1]: https://msdn.microsoft.com/en-us/library/windows/desktop/dd206750(v=vs.85).aspx\"]\n    #[doc =\n      r\" [2]: https://msdn.microsoft.com/en-us/library/windows/desktop/dn788672(v=vs.85).aspx\"]\n    Nv12 = ,\n\n    #[doc =\n      r\" 10-bit per channel planar YUV 4:2:0 video resource format. Valid\"]\n    #[doc =\n      r\" luminance data view formats for this video resource format are\"]\n    #[doc =\n      r\" [R16Unorm](#variant.R16Unorm) and [R16Uint](#variant.R16Uint).\"]\n    #[doc = r\" The runtime does not enforce whether the lowest 6 bits are 0\"]\n    #[doc =\n      r\" (given that this video resource format is a 10-bit format that\"]\n    #[doc =\n      r\" uses 16 bits). If required, application shader code would have to\"]\n    #[doc = r\" enforce this manually. From the runtime's point of view,\"]\n    #[doc =\n      r\" [P010](#variant.P010) is no different than [P016](#variant.P016).\"]\n    #[doc =\n      r\" Valid chrominance data view formats (width and height are each 1/2\"]\n    #[doc = r\" of luminance view) for this video resource format are\"]\n    #[doc = r\" [R16G16Unorm](#variant.R16G16Unorm) and\"]\n    #[doc =\n      r\" [R16G16Uint](#variant.R16G16Uint). For UAVs, an additional valid\"]\n    #[doc =\n      r\" chrominance data view format is [R32Uint](#variant.R32Uint). By\"]\n    #[doc =\n      r\" using [R32Uint](#variant.R32Uint) for UAVs, you can both read and\"]\n    #[doc = r\" write as opposed to just write for\"]\n    #[doc = r\" [R16G16Unorm](#variant.R16G16Unorm) and\"]\n    #[doc =\n      r\" [R16G16Uint](#variant.R16G16Uint). Supported view types are SRV,\"]\n    #[doc =\n      r\" RTV, and UAV. For luminance data view, the mapping to the view\"]\n    #[doc =\n      r\" channel is Y->R16. For chrominance data view, the mapping to the\"]\n    #[doc = r\" view channel is U->R16 and V->G16.\"]\n    #[doc = r\"\"]\n    #[doc = r\" For more info about YUV formats for video rendering, see\"]\n    #[doc = r\" [Recommended 8-Bit YUV Formats for Video Rendering.][1]\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" Width and height must be even. Direct3D 11 staging resources and\"]\n    #[doc = r\" initData parameters for this format use\"]\n    #[doc = r\" `(rowPitch * (height + (height / 2)))` bytes. The first\"]\n    #[doc = r\" `(SysMemPitch * height)` bytes are the Y plane, the remaining\"]\n    #[doc = r\" `(SysMemPitch * (height / 2))` bytes are the UV plane.\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" An app using the YUY 4:2:0 formats must map the luma (Y) plane\"]\n    #[doc = r\" separately from the chroma (UV) planes. Developers do this by\"]\n    #[doc =\n      r\" calling [ID3D12Device::CreateShaderResourceView][2] twice for the\"]\n    #[doc = r\" same texture and passing in 1-channel and 2-channel formats.\"]\n    #[doc =\n      r\" Passing in a 1-channel format compatible with the Y plane maps\"]\n    #[doc =\n      r\" only the Y plane. Passing in a 2-channel format compatible with\"]\n    #[doc =\n      r\" the UV planes (together) maps only the U and V planes as a single\"]\n    #[doc = r\" resource view.\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" **Direct3D 11.1:** This value is not supported until Windows 8.\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" [1]: https://msdn.microsoft.com/en-us/library/windows/desktop/dd206750(v=vs.85).aspx\"]\n    #[doc =\n      r\" [2]: https://msdn.microsoft.com/en-us/library/windows/desktop/dn788672(v=vs.85).aspx\"]\n    P010 = ,\n\n    #[doc =\n      r\" 16-bit per channel planar YUV 4:2:0 video resource format. Valid\"]\n    #[doc =\n      r\" luminance data view formats for this video resource format are\"]\n    #[doc =\n      r\" [R16Unorm](#variant.R16Unorm) and [R16Uint](#variant.R16Uint).\"]\n    #[doc =\n      r\" Valid chrominance data view formats (width and height are each 1/2\"]\n    #[doc = r\" of luminance view) for this video resource format are\"]\n    #[doc = r\" [R16G16Unorm](#variant.R16G16Unorm) and\"]\n    #[doc =\n      r\" [R16G16Uint](#variant.R16G16Uint). For UAVs, an additional valid\"]\n    #[doc =\n      r\" chrominance data view format is [R32Uint](#variant.R32Uint). By\"]\n    #[doc =\n      r\" using [R32Uint](#variant.R32Uint) for UAVs, you can both read and\"]\n    #[doc = r\" write as opposed to just write for\"]\n    #[doc = r\" [R16G16Unorm](#variant.R16G16Unorm) and\"]\n    #[doc =\n      r\" [R16G16Uint](#variant.R16G16Uint). Supported view types are SRV,\"]\n    #[doc =\n      r\" RTV, and UAV. For luminance data view, the mapping to the view\"]\n    #[doc =\n      r\" channel is Y->R16. For chrominance data view, the mapping to the\"]\n    #[doc = r\" view channel is U->R16 and V->G16.\"]\n    #[doc = r\"\"]\n    #[doc = r\" For more info about YUV formats for video rendering, see\"]\n    #[doc = r\" [Recommended 8-Bit YUV Formats for Video Rendering.][1]\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" Width and height must be even. Direct3D 11 staging resources and\"]\n    #[doc = r\" initData parameters for this format use\"]\n    #[doc = r\" `(rowPitch * (height + (height / 2)))` bytes. The first\"]\n    #[doc = r\" `(SysMemPitch * height)` bytes are the Y plane, the remaining\"]\n    #[doc = r\" `(SysMemPitch * (height / 2))` bytes are the UV plane.\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" An app using the YUY 4:2:0 formats must map the luma (Y) plane\"]\n    #[doc = r\" separately from the chroma (UV) planes. Developers do this by\"]\n    #[doc =\n      r\" calling [ID3D12Device::CreateShaderResourceView][2] twice for the\"]\n    #[doc = r\" same texture and passing in 1-channel and 2-channel formats.\"]\n    #[doc =\n      r\" Passing in a 1-channel format compatible with the Y plane maps\"]\n    #[doc =\n      r\" only the Y plane. Passing in a 2-channel format compatible with\"]\n    #[doc =\n      r\" the UV planes (together) maps only the U and V planes as a single\"]\n    #[doc = r\" resource view.\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" **Direct3D 11.1:** This value is not supported until Windows 8.\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" [1]: https://msdn.microsoft.com/en-us/library/windows/desktop/dd206750(v=vs.85).aspx\"]\n    #[doc =\n      r\" [2]: https://msdn.microsoft.com/en-us/library/windows/desktop/dn788672(v=vs.85).aspx\"]\n    P016 = ,\n\n    #[doc =\n      r\" 8-bit per channel planar YUV 4:2:0 video resource format. This\"]\n    #[doc =\n      r\" format is subsampled where each pixel has its own Y value, but\"]\n    #[doc =\n      r\" each 2x2 pixel block shares a single U and V value. The runtime\"]\n    #[doc = r\" requires that the width and height of all resources that are\"]\n    #[doc = r\" created with this format are multiples of 2. The runtime also\"]\n    #[doc = r\" requires that the left, right, top, and bottom members of any\"]\n    #[doc = r\" `RECT` that are used for this format are multiples of 2. This\"]\n    #[doc =\n      r\" format differs from [Nv12](#variant.Nv12) in that the layout of\"]\n    #[doc =\n      r\" the data within the resource is completely opaque to applications.\"]\n    #[doc = r\" Applications cannot use the CPU to map the resource and then\"]\n    #[doc =\n      r\" access the data within the resource. You cannot use shaders with\"]\n    #[doc = r\" this format. Because of this behavior, legacy hardware that\"]\n    #[doc =\n      r\" supports a non-NV12 4:2:0 layout (for example, YV12, and so on)\"]\n    #[doc =\n      r\" can be used. Also, new hardware that has a 4:2:0 implementation\"]\n    #[doc =\n      r\" better than NV12 can be used when the application does not need\"]\n    #[doc = r\" the data to be in a standard layout.\"]\n    #[doc = r\"\"]\n    #[doc = r\" For more info about YUV formats for video rendering, see\"]\n    #[doc = r\" [Recommended 8-Bit YUV Formats for Video Rendering.][1]\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" Width and height must be even. Direct3D 11 staging resources and\"]\n    #[doc = r\" initData parameters for this format use\"]\n    #[doc = r\" `(rowPitch * (height + (height / 2)))` bytes. The first\"]\n    #[doc = r\" `(SysMemPitch * height)` bytes are the Y plane, the remaining\"]\n    #[doc = r\" `(SysMemPitch * (height / 2))` bytes are the UV plane.\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" An app using the YUY 4:2:0 formats must map the luma (Y) plane\"]\n    #[doc = r\" separately from the chroma (UV) planes. Developers do this by\"]\n    #[doc =\n      r\" calling [ID3D12Device::CreateShaderResourceView][2] twice for the\"]\n    #[doc = r\" same texture and passing in 1-channel and 2-channel formats.\"]\n    #[doc =\n      r\" Passing in a 1-channel format compatible with the Y plane maps\"]\n    #[doc =\n      r\" only the Y plane. Passing in a 2-channel format compatible with\"]\n    #[doc =\n      r\" the UV planes (together) maps only the U and V planes as a single\"]\n    #[doc = r\" resource view.\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" **Direct3D 11.1:** This value is not supported until Windows 8.\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" [1]: https://msdn.microsoft.com/en-us/library/windows/desktop/dd206750(v=vs.85).aspx\"]\n    #[doc =\n      r\" [2]: https://msdn.microsoft.com/en-us/library/windows/desktop/dn788672(v=vs.85).aspx\"]\n    Yuv420Opaque = ,\n\n    #[doc =\n      r\" Most common YUV 4:2:2 video resource format. Valid view formats\"]\n    #[doc = r\" for this video resource format are\"]\n    #[doc = r\" [R8G8B8A8Unorm](#variant.R8G8B8A8Unorm) and\"]\n    #[doc =\n      r\" [R8G8B8A8Uint](#variant.R8G8B8A8Uint). For UAVs, an additional\"]\n    #[doc = r\" valid view format is [R32Uint](#variant.R32Uint). By using\"]\n    #[doc =\n      r\" [R32Uint](#variant.R32Uint) for UAVs, you can both read and write\"]\n    #[doc = r\" as opposed to just write for\"]\n    #[doc = r\" [R8G8B8A8Unorm](#variant.R8G8B8A8Unorm) and\"]\n    #[doc =\n      r\" [R8G8B8A8Uint](#variant.R8G8B8A8Uint). Supported view types are\"]\n    #[doc =\n      r\" SRV and UAV. One view provides a straightforward mapping of the\"]\n    #[doc =\n      r\" entire surface. The mapping to the view channel is Y0->R8, U0->G8,\"]\n    #[doc = r\" Y1->B8, and V0->A8.\"]\n    #[doc = r\"\"]\n    #[doc = r\" A unique valid view format for this video resource format is\"]\n    #[doc =\n      r\" [R8G8_B8G8Unorm](#variant.R8G8_B8G8Unorm). With this view format,\"]\n    #[doc = r\" the width of the view appears to be twice what the\"]\n    #[doc = r\" [R8G8B8A8Unorm](#variant.R8G8B8A8Unorm) or\"]\n    #[doc =\n      r\" [R8G8B8A8Uint](#variant.R8G8B8A8Uint) view would be when hardware\"]\n    #[doc =\n      r\" reconstructs RGBA automatically on read and before filtering. This\"]\n    #[doc =\n      r\" Direct3D hardware behavior is legacy and is likely not useful any\"]\n    #[doc =\n      r\" more. With this view format, the mapping to the view channel is\"]\n    #[doc = r\" Y0->R8, U0->G8[0], Y1->B8, and V0->G8[1].\"]\n    #[doc = r\"\"]\n    #[doc = r\" For more info about YUV formats for video rendering, see\"]\n    #[doc = r\" [Recommended 8-Bit YUV Formats for Video Rendering.][1]\"]\n    #[doc = r\"\"]\n    #[doc = r\" Width must be even.\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" **Direct3D 11.1:** This value is not supported until Windows 8.\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" [1]: https://msdn.microsoft.com/en-us/library/windows/desktop/dd206750(v=vs.85).aspx\"]\n    Yuy2 = ,\n\n    #[doc =\n      r\" 10-bit per channel packed YUV 4:2:2 video resource format. Valid\"]\n    #[doc = r\" view formats for this video resource format are\"]\n    #[doc = r\" [R16G16B16A16Unorm](#variant.R16G16B16A16Unorm) and\"]\n    #[doc =\n      r\" [R16G16B16A16Uint](#variant.R16G16B16A16Uint). The runtime does\"]\n    #[doc =\n      r\" not enforce whether the lowest 6 bits are 0 (given that this video\"]\n    #[doc =\n      r\" resource format is a 10-bit format that uses 16 bits). If required,\"]\n    #[doc =\n      r\" application shader code would have to enforce this manually. From\"]\n    #[doc =\n      r\" the runtime's point of view, [Y210](#variant.Y210) is no different\"]\n    #[doc =\n      r\" than [Y216](#variant.Y216). Supported view types are SRV and UAV.\"]\n    #[doc =\n      r\" One view provides a straightforward mapping of the entire surface.\"]\n    #[doc =\n      r\" The mapping to the view channel is Y0->R16, U->G16, Y1->B16, and\"]\n    #[doc = r\" V->A16.\"]\n    #[doc = r\"\"]\n    #[doc = r\" For more info about YUV formats for video rendering, see\"]\n    #[doc = r\" [Recommended 8-Bit YUV Formats for Video Rendering.][1]\"]\n    #[doc = r\"\"]\n    #[doc = r\" Width must be even.\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" **Direct3D 11.1:** This value is not supported until Windows 8.\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" [1]: https://msdn.microsoft.com/en-us/library/windows/desktop/dd206750(v=vs.85).aspx\"]\n    Y210 = ,\n\n    #[doc =\n      r\" 16-bit per channel packed YUV 4:2:2 video resource format. Valid\"]\n    #[doc = r\" view formats for this video resource format are\"]\n    #[doc = r\" [R16G16B16A16Unorm](#variant.R16G16B16A16Unorm) and\"]\n    #[doc =\n      r\" [R16G16B16A16Uint](#variant.R16G16B16A16Uint). Supported view types\"]\n    #[doc =\n      r\" are SRV and UAV. One view provides a straightforward mapping of the\"]\n    #[doc =\n      r\" entire surface. The mapping to the view channel is Y0->R16, U->G16,\"]\n    #[doc = r\" Y1->B16, and V->A16.\"]\n    #[doc = r\"\"]\n    #[doc = r\" For more info about YUV formats for video rendering, see\"]\n    #[doc = r\" [Recommended 8-Bit YUV Formats for Video Rendering.][1]\"]\n    #[doc = r\"\"]\n    #[doc = r\" Width must be even.\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" **Direct3D 11.1:** This value is not supported until Windows 8.\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" [1]: https://msdn.microsoft.com/en-us/library/windows/desktop/dd206750(v=vs.85).aspx\"]\n    Y216 = ,\n\n    #[doc =\n      r\" Most common planar YUV 4:1:1 video resource format. Valid luminance\"]\n    #[doc = r\" data view formats for this video resource format are\"]\n    #[doc =\n      r\" [R8Unorm](#variant.R8Unorm) and [R8Uint](#variant.R8Uint). Valid\"]\n    #[doc =\n      r\" chrominance data view formats (width and height are each 1/4 of\"]\n    #[doc = r\" luminance view) for this video resource format are\"]\n    #[doc =\n      r\" [R8G8Unorm](#variant.R8G8Unorm) and [R8G8Uint](#variant.R8G8Uint).\"]\n    #[doc =\n      r\" Supported view types are SRV, RTV, and UAV. For luminance data\"]\n    #[doc =\n      r\" view, the mapping to the view channel is Y->R8. For chrominance\"]\n    #[doc =\n      r\" data view, the mapping to the view channel is U->R8 and V->G8.\"]\n    #[doc = r\"\"]\n    #[doc = r\" For more info about YUV formats for video rendering, see\"]\n    #[doc = r\" [Recommended 8-Bit YUV Formats for Video Rendering.][1]\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" Width must be a multiple of 4. Direct3D11 staging resources and\"]\n    #[doc =\n      r\" initData parameters for this format use `(rowPitch * height * 2)`\"]\n    #[doc =\n      r\" bytes. The first `(SysMemPitch * height)` bytes are the Y plane,\"]\n    #[doc =\n      r\" the next `((SysMemPitch / 2) * height)` bytes are the UV plane,\"]\n    #[doc = r\" and the remainder is padding.\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" **Direct3D 11.1:** This value is not supported until Windows 8.\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" [1]: https://msdn.microsoft.com/en-us/library/windows/desktop/dd206750(v=vs.85).aspx\"]\n    Nv11 = ,\n\n    #[doc =\n      r\" 4-bit palletized YUV format that is commonly used for DVD subpicture.\"]\n    #[doc = r\"\"]\n    #[doc = r\" For more info about YUV formats for video rendering, see\"]\n    #[doc = r\" [Recommended 8-Bit YUV Formats for Video Rendering.][1]\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" **Direct3D 11.1:** This value is not supported until Windows 8.\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" [1]: https://msdn.microsoft.com/en-us/library/windows/desktop/dd206750(v=vs.85).aspx\"]\n    Ai44 = ,\n\n    #[doc =\n      r\" 4-bit palletized YUV format that is commonly used for DVD subpicture.\"]\n    #[doc = r\"\"]\n    #[doc = r\" For more info about YUV formats for video rendering, see\"]\n    #[doc = r\" [Recommended 8-Bit YUV Formats for Video Rendering.][1]\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" **Direct3D 11.1:** This value is not supported until Windows 8.\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" [1]: https://msdn.microsoft.com/en-us/library/windows/desktop/dd206750(v=vs.85).aspx\"]\n    Ia44 = ,\n\n    #[doc =\n      r\" 8-bit palletized format that is used for palletized RGB data when\"]\n    #[doc =\n      r\" the processor processes ISDB-T data and for palletized YUV data\"]\n    #[doc = r\" when the processor processes BluRay data.\"]\n    #[doc = r\"\"]\n    #[doc = r\" For more info about YUV formats for video rendering, see\"]\n    #[doc = r\" [Recommended 8-Bit YUV Formats for Video Rendering.][1]\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" **Direct3D 11.1:** This value is not supported until Windows 8.\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" [1]: https://msdn.microsoft.com/en-us/library/windows/desktop/dd206750(v=vs.85).aspx\"]\n    P8 = ,\n\n    #[doc = r\" 8-bit palletized format with 8 bits of alpha that is used for\"]\n    #[doc = r\" palletized YUV data when the processor processes BluRay data.\"]\n    #[doc = r\"\"]\n    #[doc = r\" For more info about YUV formats for video rendering, see\"]\n    #[doc = r\" [Recommended 8-Bit YUV Formats for Video Rendering.][1]\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" **Direct3D 11.1:** This value is not supported until Windows 8.\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" [1]: https://msdn.microsoft.com/en-us/library/windows/desktop/dd206750(v=vs.85).aspx\"]\n    A8P8 = ,\n\n    #[doc =\n      r\" A four-component, 16-bit unsigned-normalized integer format that\"]\n    #[doc = r\" supports 4 bits for each channel including alpha.\"]\n    #[doc = r\"\"]\n    #[doc =\n      r\" **Direct3D 11.1:** This value is not supported until Windows 8.\"]\n    B4G4R4A4Unorm = ,\n\n    #[doc =\n      r\" A video format; an 8-bit version of a hybrid planar 4:2:2 format.\"]\n    P208 = ,\n\n    #[doc = r\" An 8 bit YCbCrA 4:4 rendering format.\"]\n    V208 = ,\n\n    #[doc = r\" An 8 bit YCbCrA 4:4:4:4 rendering format.\"]\n    V408 = ,\n}","parent":null,"children":[{"krate":0,"index":580},{"krate":0,"index":583},{"krate":0,"index":586},{"krate":0,"index":589},{"krate":0,"index":592},{"krate":0,"index":595},{"krate":0,"index":598},{"krate":0,"index":601},{"krate":0,"index":604},{"krate":0,"index":607},{"krate":0,"index":610},{"krate":0,"index":613},{"krate":0,"index":616},{"krate":0,"index":619},{"krate":0,"index":622},{"krate":0,"index":625},{"krate":0,"index":628},{"krate":0,"index":631},{"krate":0,"index":634},{"krate":0,"index":637},{"krate":0,"index":640},{"krate":0,"index":643},{"krate":0,"index":646},{"krate":0,"index":649},{"krate":0,"index":652},{"krate":0,"index":655},{"krate":0,"index":658},{"krate":0,"index":661},{"krate":0,"index":664},{"krate":0,"index":667},{"krate":0,"index":670},{"krate":0,"index":673},{"krate":0,"index":676},{"krate":0,"index":679},{"krate":0,"index":682},{"krate":0,"index":685},{"krate":0,"index":688},{"krate":0,"index":691},{"krate":0,"index":694},{"krate":0,"index":697},{"krate":0,"index":700},{"krate":0,"index":703},{"krate":0,"index":706},{"krate":0,"index":709},{"krate":0,"index":712},{"krate":0,"index":715},{"krate":0,"index":718},{"krate":0,"index":721},{"krate":0,"index":724},{"krate":0,"index":727},{"krate":0,"index":730},{"krate":0,"index":733},{"krate":0,"index":736},{"krate":0,"index":739},{"krate":0,"index":742},{"krate":0,"index":745},{"krate":0,"index":748},{"krate":0,"index":751},{"krate":0,"index":754},{"krate":0,"index":757},{"krate":0,"index":760},{"krate":0,"index":763},{"krate":0,"index":766},{"krate":0,"index":769},{"krate":0,"index":772},{"krate":0,"index":775},{"krate":0,"index":778},{"krate":0,"index":781},{"krate":0,"index":784},{"krate":0,"index":787},{"krate":0,"index":790},{"krate":0,"index":793},{"krate":0,"index":796},{"krate":0,"index":799},{"krate":0,"index":802},{"krate":0,"index":805},{"krate":0,"index":808},{"krate":0,"index":811},{"krate":0,"index":814},{"krate":0,"index":817},{"krate":0,"index":820},{"krate":0,"index":823},{"krate":0,"index":826},{"krate":0,"index":829},{"krate":0,"index":832},{"krate":0,"index":835},{"krate":0,"index":838},{"krate":0,"index":841},{"krate":0,"index":844},{"krate":0,"index":847},{"krate":0,"index":850},{"krate":0,"index":853},{"krate":0,"index":856},{"krate":0,"index":859},{"krate":0,"index":862},{"krate":0,"index":865},{"krate":0,"index":868},{"krate":0,"index":871},{"krate":0,"index":874},{"krate":0,"index":877},{"krate":0,"index":880},{"krate":0,"index":883},{"krate":0,"index":886},{"krate":0,"index":889},{"krate":0,"index":892},{"krate":0,"index":895},{"krate":0,"index":898},{"krate":0,"index":901},{"krate":0,"index":904},{"krate":0,"index":907},{"krate":0,"index":910},{"krate":0,"index":913},{"krate":0,"index":916},{"krate":0,"index":919},{"krate":0,"index":922},{"krate":0,"index":925},{"krate":0,"index":928},{"krate":0,"index":931},{"krate":0,"index":934}],"decl_id":null,"docs":" Resource data formats, including fully-typed and typeless formats. A\n list of modifiers at the bottom of the page more fully describes each\n format type.","sig":null,"attributes":[{"value":"repr(u32)","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\mod.rs","byte_start":11782,"byte_end":11797,"line_start":9,"line_end":9,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":69285,"byte_end":69295,"line_start":1090,"line_end":1090,"column_start":12,"column_end":22},"name":"pixel_size","qualname":"<Format>::pixel_size","value":"pub fn pixel_size(Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Gets the number of bytes per pixel in a texture with this format.\n Returns `0` if the format does not have a simple answer to this\n question.\n","sig":null,"attributes":[{"value":"/ Gets the number of bytes per pixel in a texture with this format.","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":69114,"byte_end":69183,"line_start":1087,"line_end":1087,"column_start":5,"column_end":74}},{"value":"/ Returns `0` if the format does not have a simple answer to this","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":69188,"byte_end":69255,"line_start":1088,"line_end":1088,"column_start":5,"column_end":72}},{"value":"/ question.","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":69260,"byte_end":69273,"line_start":1089,"line_end":1089,"column_start":5,"column_end":18}}]},{"kind":"Mod","id":{"krate":0,"index":180},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\mode_rotation.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"mode_rotation","qualname":"::flags::mode_rotation","value":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\mode_rotation.rs","parent":null,"children":[{"krate":0,"index":957},{"krate":0,"index":990},{"krate":0,"index":988},{"krate":0,"index":986},{"krate":0,"index":983},{"krate":0,"index":984},{"krate":0,"index":980},{"krate":0,"index":981},{"krate":0,"index":978},{"krate":0,"index":976},{"krate":0,"index":973},{"krate":0,"index":955}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":958},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\mode_rotation.rs","byte_start":73023,"byte_end":73034,"line_start":4,"line_end":4,"column_start":9,"column_end":20},"name":"Unspecified","qualname":"::flags::mode_rotation::ModeRotation::Unspecified","value":"ModeRotation::Unspecified","parent":{"krate":0,"index":957},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":961},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\mode_rotation.rs","byte_start":73048,"byte_end":73056,"line_start":5,"line_end":5,"column_start":9,"column_end":17},"name":"Identity","qualname":"::flags::mode_rotation::ModeRotation::Identity","value":"ModeRotation::Identity","parent":{"krate":0,"index":957},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":964},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\mode_rotation.rs","byte_start":73070,"byte_end":73078,"line_start":6,"line_end":6,"column_start":9,"column_end":17},"name":"Rotate90","qualname":"::flags::mode_rotation::ModeRotation::Rotate90","value":"ModeRotation::Rotate90","parent":{"krate":0,"index":957},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":967},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\mode_rotation.rs","byte_start":73092,"byte_end":73101,"line_start":7,"line_end":7,"column_start":9,"column_end":18},"name":"Rotate180","qualname":"::flags::mode_rotation::ModeRotation::Rotate180","value":"ModeRotation::Rotate180","parent":{"krate":0,"index":957},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":970},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\mode_rotation.rs","byte_start":73115,"byte_end":73124,"line_start":8,"line_end":8,"column_start":9,"column_end":18},"name":"Rotate270","qualname":"::flags::mode_rotation::ModeRotation::Rotate270","value":"ModeRotation::Rotate270","parent":{"krate":0,"index":957},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":957},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\mode_rotation.rs","byte_start":73000,"byte_end":73012,"line_start":3,"line_end":3,"column_start":14,"column_end":26},"name":"ModeRotation","qualname":"::flags::mode_rotation::ModeRotation","value":"pub enum ModeRotation {\n    Unspecified = ,\n    Identity = ,\n    Rotate90 = ,\n    Rotate180 = ,\n    Rotate270 = ,\n}","parent":null,"children":[{"krate":0,"index":958},{"krate":0,"index":961},{"krate":0,"index":964},{"krate":0,"index":967},{"krate":0,"index":970}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"repr(u32)","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\mod.rs","byte_start":11782,"byte_end":11797,"line_start":9,"line_end":9,"column_start":9,"column_end":24}}]},{"kind":"Mod","id":{"krate":0,"index":181},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\mode_scaling.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"mode_scaling","qualname":"::flags::mode_scaling","value":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\mode_scaling.rs","parent":null,"children":[{"krate":0,"index":993},{"krate":0,"index":1020},{"krate":0,"index":1018},{"krate":0,"index":1016},{"krate":0,"index":1013},{"krate":0,"index":1014},{"krate":0,"index":1010},{"krate":0,"index":1011},{"krate":0,"index":1008},{"krate":0,"index":1006},{"krate":0,"index":1003},{"krate":0,"index":991}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":994},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\mode_scaling.rs","byte_start":73200,"byte_end":73211,"line_start":4,"line_end":4,"column_start":9,"column_end":20},"name":"Unspecified","qualname":"::flags::mode_scaling::ModeScaling::Unspecified","value":"ModeScaling::Unspecified","parent":{"krate":0,"index":993},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":997},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\mode_scaling.rs","byte_start":73225,"byte_end":73233,"line_start":5,"line_end":5,"column_start":9,"column_end":17},"name":"Centered","qualname":"::flags::mode_scaling::ModeScaling::Centered","value":"ModeScaling::Centered","parent":{"krate":0,"index":993},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1000},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\mode_scaling.rs","byte_start":73247,"byte_end":73256,"line_start":6,"line_end":6,"column_start":9,"column_end":18},"name":"Stretched","qualname":"::flags::mode_scaling::ModeScaling::Stretched","value":"ModeScaling::Stretched","parent":{"krate":0,"index":993},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":993},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\mode_scaling.rs","byte_start":73178,"byte_end":73189,"line_start":3,"line_end":3,"column_start":14,"column_end":25},"name":"ModeScaling","qualname":"::flags::mode_scaling::ModeScaling","value":"pub enum ModeScaling { Unspecified = , Centered = , Stretched = , }","parent":null,"children":[{"krate":0,"index":994},{"krate":0,"index":997},{"krate":0,"index":1000}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"repr(u32)","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\mod.rs","byte_start":11782,"byte_end":11797,"line_start":9,"line_end":9,"column_start":9,"column_end":24}}]},{"kind":"Mod","id":{"krate":0,"index":182},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\mode_scanline_order.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"mode_scanline_order","qualname":"::flags::mode_scanline_order","value":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\mode_scanline_order.rs","parent":null,"children":[{"krate":0,"index":1023},{"krate":0,"index":1053},{"krate":0,"index":1051},{"krate":0,"index":1049},{"krate":0,"index":1046},{"krate":0,"index":1047},{"krate":0,"index":1043},{"krate":0,"index":1044},{"krate":0,"index":1041},{"krate":0,"index":1039},{"krate":0,"index":1036},{"krate":0,"index":1021}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1024},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\mode_scanline_order.rs","byte_start":73338,"byte_end":73349,"line_start":4,"line_end":4,"column_start":9,"column_end":20},"name":"Unspecified","qualname":"::flags::mode_scanline_order::ModeScanlineOrder::Unspecified","value":"ModeScanlineOrder::Unspecified","parent":{"krate":0,"index":1023},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1027},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\mode_scanline_order.rs","byte_start":73363,"byte_end":73374,"line_start":5,"line_end":5,"column_start":9,"column_end":20},"name":"Progressive","qualname":"::flags::mode_scanline_order::ModeScanlineOrder::Progressive","value":"ModeScanlineOrder::Progressive","parent":{"krate":0,"index":1023},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1030},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\mode_scanline_order.rs","byte_start":73388,"byte_end":73403,"line_start":6,"line_end":6,"column_start":9,"column_end":24},"name":"UpperFieldFirst","qualname":"::flags::mode_scanline_order::ModeScanlineOrder::UpperFieldFirst","value":"ModeScanlineOrder::UpperFieldFirst","parent":{"krate":0,"index":1023},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1033},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\mode_scanline_order.rs","byte_start":73417,"byte_end":73432,"line_start":7,"line_end":7,"column_start":9,"column_end":24},"name":"LowerFieldFirst","qualname":"::flags::mode_scanline_order::ModeScanlineOrder::LowerFieldFirst","value":"ModeScanlineOrder::LowerFieldFirst","parent":{"krate":0,"index":1023},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1023},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\mode_scanline_order.rs","byte_start":73310,"byte_end":73327,"line_start":3,"line_end":3,"column_start":14,"column_end":31},"name":"ModeScanlineOrder","qualname":"::flags::mode_scanline_order::ModeScanlineOrder","value":"pub enum ModeScanlineOrder {\n    Unspecified = ,\n    Progressive = ,\n    UpperFieldFirst = ,\n    LowerFieldFirst = ,\n}","parent":null,"children":[{"krate":0,"index":1024},{"krate":0,"index":1027},{"krate":0,"index":1030},{"krate":0,"index":1033}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"repr(u32)","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\mod.rs","byte_start":11782,"byte_end":11797,"line_start":9,"line_end":9,"column_start":9,"column_end":24}}]},{"kind":"Mod","id":{"krate":0,"index":183},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\present.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"present","qualname":"::flags::present","value":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\present.rs","parent":null,"children":[{"krate":0,"index":1089},{"krate":0,"index":1104},{"krate":0,"index":1102},{"krate":0,"index":1098},{"krate":0,"index":1099},{"krate":0,"index":1095},{"krate":0,"index":1096},{"krate":0,"index":1092},{"krate":0,"index":1054},{"krate":0,"index":1069},{"krate":0,"index":1072},{"krate":0,"index":1075},{"krate":0,"index":1077},{"krate":0,"index":1080},{"krate":0,"index":1082},{"krate":0,"index":1085},{"krate":0,"index":1087}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1089},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\present.rs","byte_start":73486,"byte_end":73498,"line_start":3,"line_end":3,"column_start":14,"column_end":26},"name":"PresentFlags","qualname":"::flags::present::PresentFlags","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\mod.rs","byte_start":12451,"byte_end":12461,"line_start":34,"line_end":34,"column_start":9,"column_end":19}}]},{"kind":"Const","id":{"krate":0,"index":1056},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\present.rs","byte_start":73509,"byte_end":73513,"line_start":4,"line_end":4,"column_start":9,"column_end":13},"name":"TEST","qualname":"::flags::present::PresentFlags::TEST","value":"PresentFlags","parent":{"krate":0,"index":1054},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1057},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\present.rs","byte_start":73531,"byte_end":73546,"line_start":5,"line_end":5,"column_start":9,"column_end":24},"name":"DO_NOT_SEQUENCE","qualname":"::flags::present::PresentFlags::DO_NOT_SEQUENCE","value":"PresentFlags","parent":{"krate":0,"index":1054},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1058},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\present.rs","byte_start":73564,"byte_end":73571,"line_start":6,"line_end":6,"column_start":9,"column_end":16},"name":"RESTART","qualname":"::flags::present::PresentFlags::RESTART","value":"PresentFlags","parent":{"krate":0,"index":1054},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1059},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\present.rs","byte_start":73589,"byte_end":73600,"line_start":7,"line_end":7,"column_start":9,"column_end":20},"name":"DO_NOT_WAIT","qualname":"::flags::present::PresentFlags::DO_NOT_WAIT","value":"PresentFlags","parent":{"krate":0,"index":1054},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1060},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\present.rs","byte_start":73618,"byte_end":73636,"line_start":8,"line_end":8,"column_start":9,"column_end":27},"name":"RESTRICT_TO_OUTPUT","qualname":"::flags::present::PresentFlags::RESTRICT_TO_OUTPUT","value":"PresentFlags","parent":{"krate":0,"index":1054},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1061},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\present.rs","byte_start":73654,"byte_end":73673,"line_start":9,"line_end":9,"column_start":9,"column_end":28},"name":"STEREO_PREFER_RIGHT","qualname":"::flags::present::PresentFlags::STEREO_PREFER_RIGHT","value":"PresentFlags","parent":{"krate":0,"index":1054},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1062},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\present.rs","byte_start":73691,"byte_end":73712,"line_start":10,"line_end":10,"column_start":9,"column_end":30},"name":"STEREO_TEMPORARY_MONO","qualname":"::flags::present::PresentFlags::STEREO_TEMPORARY_MONO","value":"PresentFlags","parent":{"krate":0,"index":1054},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1063},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\present.rs","byte_start":73730,"byte_end":73742,"line_start":11,"line_end":11,"column_start":9,"column_end":21},"name":"USE_DURATION","qualname":"::flags::present::PresentFlags::USE_DURATION","value":"PresentFlags","parent":{"krate":0,"index":1054},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1064},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\present.rs","byte_start":73760,"byte_end":73773,"line_start":12,"line_end":12,"column_start":9,"column_end":22},"name":"ALLOW_TEARING","qualname":"::flags::present::PresentFlags::ALLOW_TEARING","value":"PresentFlags","parent":{"krate":0,"index":1054},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":184},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\scaling.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"scaling","qualname":"::flags::scaling","value":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\scaling.rs","parent":null,"children":[{"krate":0,"index":1107},{"krate":0,"index":1134},{"krate":0,"index":1132},{"krate":0,"index":1130},{"krate":0,"index":1127},{"krate":0,"index":1128},{"krate":0,"index":1124},{"krate":0,"index":1125},{"krate":0,"index":1122},{"krate":0,"index":1120},{"krate":0,"index":1117},{"krate":0,"index":1105}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1108},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\scaling.rs","byte_start":73849,"byte_end":73856,"line_start":4,"line_end":4,"column_start":9,"column_end":16},"name":"Stretch","qualname":"::flags::scaling::Scaling::Stretch","value":"Scaling::Stretch","parent":{"krate":0,"index":1107},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1111},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\scaling.rs","byte_start":73870,"byte_end":73874,"line_start":5,"line_end":5,"column_start":9,"column_end":13},"name":"None","qualname":"::flags::scaling::Scaling::None","value":"Scaling::None","parent":{"krate":0,"index":1107},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1114},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\scaling.rs","byte_start":73888,"byte_end":73906,"line_start":6,"line_end":6,"column_start":9,"column_end":27},"name":"AspectRatioStretch","qualname":"::flags::scaling::Scaling::AspectRatioStretch","value":"Scaling::AspectRatioStretch","parent":{"krate":0,"index":1107},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1107},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\scaling.rs","byte_start":73831,"byte_end":73838,"line_start":3,"line_end":3,"column_start":14,"column_end":21},"name":"Scaling","qualname":"::flags::scaling::Scaling","value":"pub enum Scaling { Stretch = , None = , AspectRatioStretch = , }","parent":null,"children":[{"krate":0,"index":1108},{"krate":0,"index":1111},{"krate":0,"index":1114}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"repr(u32)","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\mod.rs","byte_start":11782,"byte_end":11797,"line_start":9,"line_end":9,"column_start":9,"column_end":24}}]},{"kind":"Mod","id":{"krate":0,"index":185},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\swap_chain.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"swap_chain","qualname":"::flags::swap_chain","value":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\swap_chain.rs","parent":null,"children":[{"krate":0,"index":1172},{"krate":0,"index":1187},{"krate":0,"index":1185},{"krate":0,"index":1181},{"krate":0,"index":1182},{"krate":0,"index":1178},{"krate":0,"index":1179},{"krate":0,"index":1175},{"krate":0,"index":1135},{"krate":0,"index":1152},{"krate":0,"index":1155},{"krate":0,"index":1158},{"krate":0,"index":1160},{"krate":0,"index":1163},{"krate":0,"index":1165},{"krate":0,"index":1168},{"krate":0,"index":1170}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1172},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\swap_chain.rs","byte_start":73960,"byte_end":73974,"line_start":3,"line_end":3,"column_start":14,"column_end":28},"name":"SwapChainFlags","qualname":"::flags::swap_chain::SwapChainFlags","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\mod.rs","byte_start":12451,"byte_end":12461,"line_start":34,"line_end":34,"column_start":9,"column_end":19}}]},{"kind":"Const","id":{"krate":0,"index":1137},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\swap_chain.rs","byte_start":73985,"byte_end":73998,"line_start":4,"line_end":4,"column_start":9,"column_end":22},"name":"NONPREROTATED","qualname":"::flags::swap_chain::SwapChainFlags::NONPREROTATED","value":"SwapChainFlags","parent":{"krate":0,"index":1135},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1138},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\swap_chain.rs","byte_start":74012,"byte_end":74029,"line_start":5,"line_end":5,"column_start":9,"column_end":26},"name":"ALLOW_MODE_SWITCH","qualname":"::flags::swap_chain::SwapChainFlags::ALLOW_MODE_SWITCH","value":"SwapChainFlags","parent":{"krate":0,"index":1135},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1139},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\swap_chain.rs","byte_start":74043,"byte_end":74057,"line_start":6,"line_end":6,"column_start":9,"column_end":23},"name":"GDI_COMPATIBLE","qualname":"::flags::swap_chain::SwapChainFlags::GDI_COMPATIBLE","value":"SwapChainFlags","parent":{"krate":0,"index":1135},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1140},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\swap_chain.rs","byte_start":74071,"byte_end":74089,"line_start":7,"line_end":7,"column_start":9,"column_end":27},"name":"RESTRICTED_CONTENT","qualname":"::flags::swap_chain::SwapChainFlags::RESTRICTED_CONTENT","value":"SwapChainFlags","parent":{"krate":0,"index":1135},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1141},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\swap_chain.rs","byte_start":74103,"byte_end":74134,"line_start":8,"line_end":8,"column_start":9,"column_end":40},"name":"RESTRICT_SHARED_RESOURCE_DRIVER","qualname":"::flags::swap_chain::SwapChainFlags::RESTRICT_SHARED_RESOURCE_DRIVER","value":"SwapChainFlags","parent":{"krate":0,"index":1135},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1142},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\swap_chain.rs","byte_start":74149,"byte_end":74161,"line_start":9,"line_end":9,"column_start":9,"column_end":21},"name":"DISPLAY_ONLY","qualname":"::flags::swap_chain::SwapChainFlags::DISPLAY_ONLY","value":"SwapChainFlags","parent":{"krate":0,"index":1135},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1143},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\swap_chain.rs","byte_start":74176,"byte_end":74205,"line_start":10,"line_end":10,"column_start":9,"column_end":38},"name":"FRAME_LATENCY_WAITABLE_OBJECT","qualname":"::flags::swap_chain::SwapChainFlags::FRAME_LATENCY_WAITABLE_OBJECT","value":"SwapChainFlags","parent":{"krate":0,"index":1135},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1144},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\swap_chain.rs","byte_start":74220,"byte_end":74236,"line_start":11,"line_end":11,"column_start":9,"column_end":25},"name":"FOREGROUND_LAYER","qualname":"::flags::swap_chain::SwapChainFlags::FOREGROUND_LAYER","value":"SwapChainFlags","parent":{"krate":0,"index":1135},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1145},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\swap_chain.rs","byte_start":74252,"byte_end":74268,"line_start":12,"line_end":12,"column_start":9,"column_end":25},"name":"FULLSCREEN_VIDEO","qualname":"::flags::swap_chain::SwapChainFlags::FULLSCREEN_VIDEO","value":"SwapChainFlags","parent":{"krate":0,"index":1135},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1146},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\swap_chain.rs","byte_start":74284,"byte_end":74293,"line_start":13,"line_end":13,"column_start":9,"column_end":18},"name":"YUV_VIDEO","qualname":"::flags::swap_chain::SwapChainFlags::YUV_VIDEO","value":"SwapChainFlags","parent":{"krate":0,"index":1135},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1147},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\swap_chain.rs","byte_start":74310,"byte_end":74323,"line_start":14,"line_end":14,"column_start":9,"column_end":22},"name":"ALLOW_TEARING","qualname":"::flags::swap_chain::SwapChainFlags::ALLOW_TEARING","value":"SwapChainFlags","parent":{"krate":0,"index":1135},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":186},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\swap_effect.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"swap_effect","qualname":"::flags::swap_effect","value":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\swap_effect.rs","parent":null,"children":[{"krate":0,"index":1190},{"krate":0,"index":1220},{"krate":0,"index":1218},{"krate":0,"index":1216},{"krate":0,"index":1213},{"krate":0,"index":1214},{"krate":0,"index":1210},{"krate":0,"index":1211},{"krate":0,"index":1208},{"krate":0,"index":1206},{"krate":0,"index":1203},{"krate":0,"index":1188}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1191},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\swap_effect.rs","byte_start":74401,"byte_end":74408,"line_start":4,"line_end":4,"column_start":9,"column_end":16},"name":"Discard","qualname":"::flags::swap_effect::SwapEffect::Discard","value":"SwapEffect::Discard","parent":{"krate":0,"index":1190},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1194},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\swap_effect.rs","byte_start":74422,"byte_end":74432,"line_start":5,"line_end":5,"column_start":9,"column_end":19},"name":"Sequential","qualname":"::flags::swap_effect::SwapEffect::Sequential","value":"SwapEffect::Sequential","parent":{"krate":0,"index":1190},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1197},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\swap_effect.rs","byte_start":74446,"byte_end":74460,"line_start":6,"line_end":6,"column_start":9,"column_end":23},"name":"FlipSequential","qualname":"::flags::swap_effect::SwapEffect::FlipSequential","value":"SwapEffect::FlipSequential","parent":{"krate":0,"index":1190},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1200},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\swap_effect.rs","byte_start":74474,"byte_end":74485,"line_start":7,"line_end":7,"column_start":9,"column_end":20},"name":"FlipDiscard","qualname":"::flags::swap_effect::SwapEffect::FlipDiscard","value":"SwapEffect::FlipDiscard","parent":{"krate":0,"index":1190},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1190},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\swap_effect.rs","byte_start":74380,"byte_end":74390,"line_start":3,"line_end":3,"column_start":14,"column_end":24},"name":"SwapEffect","qualname":"::flags::swap_effect::SwapEffect","value":"pub enum SwapEffect {\n    Discard = ,\n    Sequential = ,\n    FlipSequential = ,\n    FlipDiscard = ,\n}","parent":null,"children":[{"krate":0,"index":1191},{"krate":0,"index":1194},{"krate":0,"index":1197},{"krate":0,"index":1200}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"repr(u32)","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\mod.rs","byte_start":11782,"byte_end":11797,"line_start":9,"line_end":9,"column_start":9,"column_end":24}}]},{"kind":"Mod","id":{"krate":0,"index":187},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\usage.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"usage","qualname":"::flags::usage","value":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\usage.rs","parent":null,"children":[{"krate":0,"index":1254},{"krate":0,"index":1269},{"krate":0,"index":1267},{"krate":0,"index":1263},{"krate":0,"index":1264},{"krate":0,"index":1260},{"krate":0,"index":1261},{"krate":0,"index":1257},{"krate":0,"index":1221},{"krate":0,"index":1234},{"krate":0,"index":1237},{"krate":0,"index":1240},{"krate":0,"index":1242},{"krate":0,"index":1245},{"krate":0,"index":1247},{"krate":0,"index":1250},{"krate":0,"index":1252}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1254},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\usage.rs","byte_start":74539,"byte_end":74549,"line_start":3,"line_end":3,"column_start":14,"column_end":24},"name":"UsageFlags","qualname":"::flags::usage::UsageFlags","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\mod.rs","byte_start":12451,"byte_end":12461,"line_start":34,"line_end":34,"column_start":9,"column_end":19}}]},{"kind":"Const","id":{"krate":0,"index":1223},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\usage.rs","byte_start":74560,"byte_end":74571,"line_start":4,"line_end":4,"column_start":9,"column_end":20},"name":"BACK_BUFFER","qualname":"::flags::usage::UsageFlags::BACK_BUFFER","value":"UsageFlags","parent":{"krate":0,"index":1221},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1224},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\usage.rs","byte_start":74596,"byte_end":74614,"line_start":5,"line_end":5,"column_start":9,"column_end":27},"name":"DISCARD_ON_PRESENT","qualname":"::flags::usage::UsageFlags::DISCARD_ON_PRESENT","value":"UsageFlags","parent":{"krate":0,"index":1221},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1225},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\usage.rs","byte_start":74639,"byte_end":74648,"line_start":6,"line_end":6,"column_start":9,"column_end":18},"name":"READ_ONLY","qualname":"::flags::usage::UsageFlags::READ_ONLY","value":"UsageFlags","parent":{"krate":0,"index":1221},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1226},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\usage.rs","byte_start":74673,"byte_end":74693,"line_start":7,"line_end":7,"column_start":9,"column_end":29},"name":"RENDER_TARGET_OUTPUT","qualname":"::flags::usage::UsageFlags::RENDER_TARGET_OUTPUT","value":"UsageFlags","parent":{"krate":0,"index":1221},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1227},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\usage.rs","byte_start":74718,"byte_end":74730,"line_start":8,"line_end":8,"column_start":9,"column_end":21},"name":"SHADER_INPUT","qualname":"::flags::usage::UsageFlags::SHADER_INPUT","value":"UsageFlags","parent":{"krate":0,"index":1221},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1228},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\usage.rs","byte_start":74755,"byte_end":74761,"line_start":9,"line_end":9,"column_start":9,"column_end":15},"name":"SHARED","qualname":"::flags::usage::UsageFlags::SHARED","value":"UsageFlags","parent":{"krate":0,"index":1221},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1229},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\usage.rs","byte_start":74786,"byte_end":74802,"line_start":10,"line_end":10,"column_start":9,"column_end":25},"name":"UNORDERED_ACCESS","qualname":"::flags::usage::UsageFlags::UNORDERED_ACCESS","value":"UsageFlags","parent":{"krate":0,"index":1221},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":188},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"output","qualname":"::output","value":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","parent":null,"children":[{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":1524},{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":1270},{"krate":0,"index":1276},{"krate":0,"index":1272},{"krate":0,"index":1273},{"krate":0,"index":227},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":1278},{"krate":0,"index":1282},{"krate":0,"index":1280},{"krate":0,"index":244},{"krate":0,"index":1283},{"krate":0,"index":1287},{"krate":0,"index":1285},{"krate":0,"index":251},{"krate":0,"index":266},{"krate":0,"index":1288},{"krate":0,"index":1292},{"krate":0,"index":1290},{"krate":0,"index":268},{"krate":0,"index":273},{"krate":0,"index":1293},{"krate":0,"index":1297},{"krate":0,"index":1295},{"krate":0,"index":275},{"krate":0,"index":1298},{"krate":0,"index":1302},{"krate":0,"index":1300},{"krate":0,"index":285},{"krate":0,"index":1303},{"krate":0,"index":1307},{"krate":0,"index":1305},{"krate":0,"index":293},{"krate":0,"index":1308},{"krate":0,"index":1312},{"krate":0,"index":1310},{"krate":0,"index":301}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1270},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":75831,"byte_end":75837,"line_start":26,"line_end":26,"column_start":12,"column_end":18},"name":"Output","qualname":"::output::Output","value":"Output {  }","parent":null,"children":[{"krate":0,"index":1271}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":75912,"byte_end":75920,"line_start":32,"line_end":32,"column_start":12,"column_end":20},"name":"get_desc","qualname":"<Output>::get_desc","value":"pub fn get_desc(&Self) -> OutputDesc","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":75891,"byte_end":75900,"line_start":31,"line_end":31,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":229},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":76174,"byte_end":76183,"line_start":44,"line_end":44,"column_start":12,"column_end":21},"name":"get_modes","qualname":"<Output>::get_modes","value":"pub fn get_modes(&Self, DXGI_FORMAT) -> Result<Vec<Mode>, Error>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":76153,"byte_end":76162,"line_start":43,"line_end":43,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":230},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":77138,"byte_end":77164,"line_start":71,"line_end":71,"column_start":12,"column_end":38},"name":"find_closest_matching_mode","qualname":"<Output>::find_closest_matching_mode","value":"pub fn find_closest_matching_mode(&Self, &Mode, Option<&Device>)\n-> Result<Mode, Error>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":77117,"byte_end":77126,"line_start":70,"line_end":70,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":232},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":77661,"byte_end":77676,"line_start":90,"line_end":90,"column_start":12,"column_end":27},"name":"wait_for_vblank","qualname":"<Output>::wait_for_vblank","value":"pub fn wait_for_vblank(&Self) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":77640,"byte_end":77649,"line_start":89,"line_end":89,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":233},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":77844,"byte_end":77858,"line_start":98,"line_end":98,"column_start":12,"column_end":26},"name":"take_ownership","qualname":"<Output>::take_ownership","value":"pub fn take_ownership(&Self, &Device, bool) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":77823,"byte_end":77832,"line_start":97,"line_end":97,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":234},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":78132,"byte_end":78149,"line_start":107,"line_end":107,"column_start":12,"column_end":29},"name":"release_ownership","qualname":"<Output>::release_ownership","value":"pub fn release_ownership(&Self)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":78111,"byte_end":78120,"line_start":106,"line_end":106,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":235},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":78259,"byte_end":78289,"line_start":114,"line_end":114,"column_start":12,"column_end":42},"name":"get_gamma_control_capabilities","qualname":"<Output>::get_gamma_control_capabilities","value":"pub fn get_gamma_control_capabilities(&Self)\n-> Result<GammaControlCaps, Error>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":78238,"byte_end":78247,"line_start":113,"line_end":113,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":236},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":78568,"byte_end":78585,"line_start":123,"line_end":123,"column_start":12,"column_end":29},"name":"get_gamma_control","qualname":"<Output>::get_gamma_control","value":"pub fn get_gamma_control(&Self) -> Result<GammaControl, Error>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":78547,"byte_end":78556,"line_start":122,"line_end":122,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":237},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":78853,"byte_end":78870,"line_start":132,"line_end":132,"column_start":12,"column_end":29},"name":"set_gamma_control","qualname":"<Output>::set_gamma_control","value":"pub fn set_gamma_control(&Self, &GammaControl) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":78832,"byte_end":78841,"line_start":131,"line_end":131,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":238},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":79265,"byte_end":79289,"line_start":143,"line_end":143,"column_start":12,"column_end":36},"name":"get_display_surface_data","qualname":"<Output>::get_display_surface_data","value":"pub fn get_display_surface_data(&Self, &Surface) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":79244,"byte_end":79253,"line_start":142,"line_end":142,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":239},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":79501,"byte_end":79521,"line_start":151,"line_end":151,"column_start":12,"column_end":32},"name":"get_frame_statistics","qualname":"<Output>::get_frame_statistics","value":"pub fn get_frame_statistics(&Self) -> Result<FrameStatistics, Error>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":79480,"byte_end":79489,"line_start":150,"line_end":150,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":240},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":79803,"byte_end":79811,"line_start":160,"line_end":160,"column_start":19,"column_end":27},"name":"from_raw","qualname":"<Output>::from_raw","value":"pub unsafe fn from_raw(*mut IDXGIOutput) -> Output","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":79775,"byte_end":79784,"line_start":159,"line_end":159,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":241},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":79953,"byte_end":79960,"line_start":167,"line_end":167,"column_start":19,"column_end":26},"name":"get_raw","qualname":"<Output>::get_raw","value":"pub unsafe fn get_raw(&Self) -> *mut IDXGIOutput","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":79925,"byte_end":79934,"line_start":166,"line_end":166,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1278},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":80122,"byte_end":80132,"line_start":176,"line_end":176,"column_start":12,"column_end":22},"name":"OutputDesc","qualname":"::output::OutputDesc","value":"OutputDesc {  }","parent":null,"children":[{"krate":0,"index":1279}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":245},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":80209,"byte_end":80220,"line_start":182,"line_end":182,"column_start":12,"column_end":23},"name":"device_name","qualname":"<OutputDesc>::device_name","value":"pub fn device_name(&Self) -> String","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":80188,"byte_end":80197,"line_start":181,"line_end":181,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":247},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":80522,"byte_end":80541,"line_start":193,"line_end":193,"column_start":12,"column_end":31},"name":"desktop_coordinates","qualname":"<OutputDesc>::desktop_coordinates","value":"pub fn desktop_coordinates(&Self) -> RECT","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":80501,"byte_end":80510,"line_start":192,"line_end":192,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":80628,"byte_end":80647,"line_start":198,"line_end":198,"column_start":12,"column_end":31},"name":"attached_to_desktop","qualname":"<OutputDesc>::attached_to_desktop","value":"pub fn attached_to_desktop(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":80607,"byte_end":80616,"line_start":197,"line_end":197,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":249},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":80738,"byte_end":80746,"line_start":203,"line_end":203,"column_start":12,"column_end":20},"name":"rotation","qualname":"<OutputDesc>::rotation","value":"pub fn rotation(&Self) -> DXGI_MODE_ROTATION","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":80717,"byte_end":80726,"line_start":202,"line_end":202,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":80837,"byte_end":80844,"line_start":208,"line_end":208,"column_start":12,"column_end":19},"name":"monitor","qualname":"<OutputDesc>::monitor","value":"pub fn monitor(&Self) -> HMONITOR","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":80816,"byte_end":80825,"line_start":207,"line_end":207,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1283},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":80946,"byte_end":80950,"line_start":215,"line_end":215,"column_start":12,"column_end":16},"name":"Mode","qualname":"::output::Mode","value":"Mode {  }","parent":null,"children":[{"krate":0,"index":1284}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":80901,"byte_end":80911,"line_start":213,"line_end":213,"column_start":1,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":252},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":81019,"byte_end":81022,"line_start":221,"line_end":221,"column_start":12,"column_end":15},"name":"new","qualname":"<Mode>::new","value":"pub fn new() -> Mode","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":80998,"byte_end":81007,"line_start":220,"line_end":220,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":253},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":81502,"byte_end":81507,"line_start":238,"line_end":238,"column_start":12,"column_end":17},"name":"width","qualname":"<Mode>::width","value":"pub fn width(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":81481,"byte_end":81490,"line_start":237,"line_end":237,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":254},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":81580,"byte_end":81589,"line_start":243,"line_end":243,"column_start":12,"column_end":21},"name":"set_width","qualname":"<Mode>::set_width","value":"pub fn set_width(&mut Self, u32)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":81559,"byte_end":81568,"line_start":242,"line_end":242,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":255},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":81680,"byte_end":81686,"line_start":248,"line_end":248,"column_start":12,"column_end":18},"name":"height","qualname":"<Mode>::height","value":"pub fn height(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":81659,"byte_end":81668,"line_start":247,"line_end":247,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":256},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":81760,"byte_end":81770,"line_start":253,"line_end":253,"column_start":12,"column_end":22},"name":"set_height","qualname":"<Mode>::set_height","value":"pub fn set_height(&mut Self, u32)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":81739,"byte_end":81748,"line_start":252,"line_end":252,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":257},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":81864,"byte_end":81876,"line_start":258,"line_end":258,"column_start":12,"column_end":24},"name":"refresh_rate","qualname":"<Mode>::refresh_rate","value":"pub fn refresh_rate(&Self) -> Ratio<u32>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":81843,"byte_end":81852,"line_start":257,"line_end":257,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":82054,"byte_end":82070,"line_start":266,"line_end":266,"column_start":12,"column_end":28},"name":"set_refresh_rate","qualname":"<Mode>::set_refresh_rate","value":"pub fn set_refresh_rate(&mut Self, Ratio<u32>)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":82033,"byte_end":82042,"line_start":265,"line_end":265,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":259},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":82250,"byte_end":82256,"line_start":272,"line_end":272,"column_start":12,"column_end":18},"name":"format","qualname":"<Mode>::format","value":"pub fn format(&Self) -> DXGI_FORMAT","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":82229,"byte_end":82238,"line_start":271,"line_end":271,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":82338,"byte_end":82348,"line_start":277,"line_end":277,"column_start":12,"column_end":22},"name":"set_format","qualname":"<Mode>::set_format","value":"pub fn set_format(&mut Self, DXGI_FORMAT)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":82317,"byte_end":82326,"line_start":276,"line_end":276,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":261},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":82450,"byte_end":82467,"line_start":282,"line_end":282,"column_start":12,"column_end":29},"name":"scanline_ordering","qualname":"<Mode>::scanline_ordering","value":"pub fn scanline_ordering(&Self) -> DXGI_MODE_SCANLINE_ORDER","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":82429,"byte_end":82438,"line_start":281,"line_end":281,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":262},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":82572,"byte_end":82593,"line_start":287,"line_end":287,"column_start":12,"column_end":33},"name":"set_scanline_ordering","qualname":"<Mode>::set_scanline_ordering","value":"pub fn set_scanline_ordering(&mut Self, DXGI_MODE_SCANLINE_ORDER)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":82551,"byte_end":82560,"line_start":286,"line_end":286,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":263},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":82722,"byte_end":82729,"line_start":292,"line_end":292,"column_start":12,"column_end":19},"name":"scaling","qualname":"<Mode>::scaling","value":"pub fn scaling(&Self) -> DXGI_MODE_SCALING","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":82701,"byte_end":82710,"line_start":291,"line_end":291,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":264},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":82818,"byte_end":82829,"line_start":297,"line_end":297,"column_start":12,"column_end":23},"name":"set_scaling","qualname":"<Mode>::set_scaling","value":"pub fn set_scaling(&mut Self, DXGI_MODE_SCALING)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":82797,"byte_end":82806,"line_start":296,"line_end":296,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":265},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":82940,"byte_end":82943,"line_start":302,"line_end":302,"column_start":12,"column_end":15},"name":"raw","qualname":"<Mode>::raw","value":"pub fn raw(&Self) -> &DXGI_MODE_DESC","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":82919,"byte_end":82928,"line_start":301,"line_end":301,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1288},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":83490,"byte_end":83506,"line_start":321,"line_end":321,"column_start":12,"column_end":28},"name":"GammaControlCaps","qualname":"::output::GammaControlCaps","value":"GammaControlCaps {  }","parent":null,"children":[{"krate":0,"index":1289}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":269},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":83604,"byte_end":83630,"line_start":327,"line_end":327,"column_start":12,"column_end":38},"name":"scale_and_offset_supported","qualname":"<GammaControlCaps>::scale_and_offset_supported","value":"pub fn scale_and_offset_supported(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":83583,"byte_end":83592,"line_start":326,"line_end":326,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":270},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":83727,"byte_end":83746,"line_start":332,"line_end":332,"column_start":12,"column_end":31},"name":"max_converted_value","qualname":"<GammaControlCaps>::max_converted_value","value":"pub fn max_converted_value(&Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":83706,"byte_end":83715,"line_start":331,"line_end":331,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":271},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":83831,"byte_end":83850,"line_start":337,"line_end":337,"column_start":12,"column_end":31},"name":"min_converted_value","qualname":"<GammaControlCaps>::min_converted_value","value":"pub fn min_converted_value(&Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":83810,"byte_end":83819,"line_start":336,"line_end":336,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":272},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":83935,"byte_end":83958,"line_start":342,"line_end":342,"column_start":12,"column_end":35},"name":"control_point_positions","qualname":"<GammaControlCaps>::control_point_positions","value":"pub fn control_point_positions(&Self) -> &[f32]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":83914,"byte_end":83923,"line_start":341,"line_end":341,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1293},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":84693,"byte_end":84705,"line_start":363,"line_end":363,"column_start":12,"column_end":24},"name":"GammaControl","qualname":"::output::GammaControl","value":"GammaControl {  }","parent":null,"children":[{"krate":0,"index":1294}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":84786,"byte_end":84789,"line_start":369,"line_end":369,"column_start":12,"column_end":15},"name":"new","qualname":"<GammaControl>::new","value":"pub fn new() -> GammaControl","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":84765,"byte_end":84774,"line_start":368,"line_end":368,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":277},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":84875,"byte_end":84880,"line_start":374,"line_end":374,"column_start":12,"column_end":17},"name":"scale","qualname":"<GammaControl>::scale","value":"pub fn scale(&Self) -> Rgb","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":84854,"byte_end":84863,"line_start":373,"line_end":373,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":278},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":84980,"byte_end":84989,"line_start":379,"line_end":379,"column_start":12,"column_end":21},"name":"set_scale","qualname":"<GammaControl>::set_scale","value":"pub fn set_scale(&mut Self, Rgb)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":84959,"byte_end":84968,"line_start":378,"line_end":378,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":279},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":85084,"byte_end":85090,"line_start":384,"line_end":384,"column_start":12,"column_end":18},"name":"offset","qualname":"<GammaControl>::offset","value":"pub fn offset(&Self) -> Rgb","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":85063,"byte_end":85072,"line_start":383,"line_end":383,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":280},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":85191,"byte_end":85201,"line_start":389,"line_end":389,"column_start":12,"column_end":22},"name":"set_offset","qualname":"<GammaControl>::set_offset","value":"pub fn set_offset(&mut Self, Rgb)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":85170,"byte_end":85179,"line_start":388,"line_end":388,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":281},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":85299,"byte_end":85310,"line_start":394,"line_end":394,"column_start":12,"column_end":23},"name":"gamma_curve","qualname":"<GammaControl>::gamma_curve","value":"pub fn gamma_curve(&Self) -> &[Rgb; ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":85278,"byte_end":85287,"line_start":393,"line_end":393,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":283},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":85425,"byte_end":85440,"line_start":399,"line_end":399,"column_start":12,"column_end":27},"name":"gamma_curve_mut","qualname":"<GammaControl>::gamma_curve_mut","value":"pub fn gamma_curve_mut(&mut Self) -> &mut [Rgb; ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":85404,"byte_end":85413,"line_start":398,"line_end":398,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1298},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":85589,"byte_end":85592,"line_start":406,"line_end":406,"column_start":12,"column_end":15},"name":"Rgb","qualname":"::output::Rgb","value":"Rgb {  }","parent":null,"children":[{"krate":0,"index":1299}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":85544,"byte_end":85554,"line_start":404,"line_end":404,"column_start":1,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":85653,"byte_end":85656,"line_start":412,"line_end":412,"column_start":12,"column_end":15},"name":"new","qualname":"<Rgb>::new","value":"pub fn new(f32, f32, f32) -> Rgb","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":85632,"byte_end":85641,"line_start":411,"line_end":411,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":287},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":85864,"byte_end":85865,"line_start":423,"line_end":423,"column_start":12,"column_end":13},"name":"r","qualname":"<Rgb>::r","value":"pub fn r(&Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":85843,"byte_end":85852,"line_start":422,"line_end":422,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":288},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":85935,"byte_end":85936,"line_start":428,"line_end":428,"column_start":12,"column_end":13},"name":"g","qualname":"<Rgb>::g","value":"pub fn g(&Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":85914,"byte_end":85923,"line_start":427,"line_end":427,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":289},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":86008,"byte_end":86009,"line_start":433,"line_end":433,"column_start":12,"column_end":13},"name":"b","qualname":"<Rgb>::b","value":"pub fn b(&Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":85987,"byte_end":85996,"line_start":432,"line_end":432,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":290},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":86080,"byte_end":86085,"line_start":438,"line_end":438,"column_start":12,"column_end":17},"name":"set_r","qualname":"<Rgb>::set_r","value":"pub fn set_r(&mut Self, f32)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":86059,"byte_end":86068,"line_start":437,"line_end":437,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":291},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":86165,"byte_end":86170,"line_start":443,"line_end":443,"column_start":12,"column_end":17},"name":"set_g","qualname":"<Rgb>::set_g","value":"pub fn set_g(&mut Self, f32)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":86144,"byte_end":86153,"line_start":442,"line_end":442,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":292},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":86252,"byte_end":86257,"line_start":448,"line_end":448,"column_start":12,"column_end":17},"name":"set_b","qualname":"<Rgb>::set_b","value":"pub fn set_b(&mut Self, f32)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":86231,"byte_end":86240,"line_start":447,"line_end":447,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1303},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":86359,"byte_end":86363,"line_start":454,"line_end":454,"column_start":12,"column_end":16},"name":"Rgba","qualname":"::output::Rgba","value":"Rgba {  }","parent":null,"children":[{"krate":0,"index":1304}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":86314,"byte_end":86324,"line_start":452,"line_end":452,"column_start":1,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":86427,"byte_end":86430,"line_start":460,"line_end":460,"column_start":12,"column_end":15},"name":"new","qualname":"<Rgba>::new","value":"pub fn new(f32, f32, f32, f32) -> Rgba","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":86406,"byte_end":86415,"line_start":459,"line_end":459,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":295},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":86574,"byte_end":86575,"line_start":467,"line_end":467,"column_start":12,"column_end":13},"name":"r","qualname":"<Rgba>::r","value":"pub fn r(&Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":86553,"byte_end":86562,"line_start":466,"line_end":466,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":86644,"byte_end":86645,"line_start":472,"line_end":472,"column_start":12,"column_end":13},"name":"g","qualname":"<Rgba>::g","value":"pub fn g(&Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":86623,"byte_end":86632,"line_start":471,"line_end":471,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":297},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":86714,"byte_end":86715,"line_start":477,"line_end":477,"column_start":12,"column_end":13},"name":"b","qualname":"<Rgba>::b","value":"pub fn b(&Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":86693,"byte_end":86702,"line_start":476,"line_end":476,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":86784,"byte_end":86789,"line_start":482,"line_end":482,"column_start":12,"column_end":17},"name":"set_r","qualname":"<Rgba>::set_r","value":"pub fn set_r(&mut Self, f32)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":86763,"byte_end":86772,"line_start":481,"line_end":481,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":299},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":86868,"byte_end":86873,"line_start":487,"line_end":487,"column_start":12,"column_end":17},"name":"set_g","qualname":"<Rgba>::set_g","value":"pub fn set_g(&mut Self, f32)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":86847,"byte_end":86856,"line_start":486,"line_end":486,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":300},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":86952,"byte_end":86957,"line_start":492,"line_end":492,"column_start":12,"column_end":17},"name":"set_b","qualname":"<Rgba>::set_b","value":"pub fn set_b(&mut Self, f32)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":86931,"byte_end":86940,"line_start":491,"line_end":491,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1308},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":87047,"byte_end":87062,"line_start":498,"line_end":498,"column_start":12,"column_end":27},"name":"FrameStatistics","qualname":"::output::FrameStatistics","value":"FrameStatistics {  }","parent":null,"children":[{"krate":0,"index":1309}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":87160,"byte_end":87173,"line_start":504,"line_end":504,"column_start":12,"column_end":25},"name":"present_count","qualname":"<FrameStatistics>::present_count","value":"pub fn present_count(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":87139,"byte_end":87148,"line_start":503,"line_end":503,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":303},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":87253,"byte_end":87274,"line_start":509,"line_end":509,"column_start":12,"column_end":33},"name":"present_refresh_count","qualname":"<FrameStatistics>::present_refresh_count","value":"pub fn present_refresh_count(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":87232,"byte_end":87241,"line_start":508,"line_end":508,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":304},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":87361,"byte_end":87379,"line_start":514,"line_end":514,"column_start":12,"column_end":30},"name":"sync_refresh_count","qualname":"<FrameStatistics>::sync_refresh_count","value":"pub fn sync_refresh_count(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":87340,"byte_end":87349,"line_start":513,"line_end":513,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":305},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":87463,"byte_end":87476,"line_start":519,"line_end":519,"column_start":12,"column_end":25},"name":"sync_qpc_time","qualname":"<FrameStatistics>::sync_qpc_time","value":"pub fn sync_qpc_time(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":87442,"byte_end":87451,"line_start":518,"line_end":518,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":306},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":87578,"byte_end":87591,"line_start":524,"line_end":524,"column_start":12,"column_end":25},"name":"sync_gpu_time","qualname":"<FrameStatistics>::sync_gpu_time","value":"pub fn sync_gpu_time(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":87557,"byte_end":87566,"line_start":523,"line_end":523,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":307},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\surface.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"surface","qualname":"::surface","value":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\surface.rs","parent":null,"children":[{"krate":0,"index":308},{"krate":0,"index":1588},{"krate":0,"index":309},{"krate":0,"index":310},{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":315},{"krate":0,"index":316},{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":1313},{"krate":0,"index":1319},{"krate":0,"index":1315},{"krate":0,"index":1316},{"krate":0,"index":319},{"krate":0,"index":329},{"krate":0,"index":330},{"krate":0,"index":1321},{"krate":0,"index":1325},{"krate":0,"index":1323},{"krate":0,"index":331},{"krate":0,"index":337},{"krate":0,"index":343},{"krate":0,"index":349}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1313},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\surface.rs","byte_start":87984,"byte_end":87991,"line_start":13,"line_end":13,"column_start":12,"column_end":19},"name":"Surface","qualname":"::surface::Surface","value":"Surface {  }","parent":null,"children":[{"krate":0,"index":1314}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":320},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\surface.rs","byte_start":88068,"byte_end":88076,"line_start":19,"line_end":19,"column_start":12,"column_end":20},"name":"get_desc","qualname":"<Surface>::get_desc","value":"pub fn get_desc(&Self) -> SurfaceDesc","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\surface.rs","byte_start":88047,"byte_end":88056,"line_start":18,"line_end":18,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":321},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\surface.rs","byte_start":88337,"byte_end":88340,"line_start":29,"line_end":29,"column_start":19,"column_end":22},"name":"map","qualname":"<Surface>::map","value":"pub unsafe fn map<'a>(&'a Self, bool, bool, bool) -> Result<SurfaceMap, Error>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\surface.rs","byte_start":88309,"byte_end":88318,"line_start":28,"line_end":28,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":327},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\surface.rs","byte_start":89406,"byte_end":89414,"line_start":72,"line_end":72,"column_start":19,"column_end":27},"name":"from_raw","qualname":"<Surface>::from_raw","value":"pub unsafe fn from_raw(*mut IDXGISurface) -> Surface","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\surface.rs","byte_start":89378,"byte_end":89387,"line_start":71,"line_end":71,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":328},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\surface.rs","byte_start":89559,"byte_end":89566,"line_start":79,"line_end":79,"column_start":19,"column_end":26},"name":"get_raw","qualname":"<Surface>::get_raw","value":"pub unsafe fn get_raw(&Self) -> *mut IDXGISurface","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\surface.rs","byte_start":89531,"byte_end":89540,"line_start":78,"line_end":78,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1321},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\surface.rs","byte_start":89731,"byte_end":89742,"line_start":88,"line_end":88,"column_start":12,"column_end":23},"name":"SurfaceDesc","qualname":"::surface::SurfaceDesc","value":"SurfaceDesc {  }","parent":null,"children":[{"krate":0,"index":1322}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":332},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\surface.rs","byte_start":89821,"byte_end":89826,"line_start":94,"line_end":94,"column_start":12,"column_end":17},"name":"width","qualname":"<SurfaceDesc>::width","value":"pub fn width(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\surface.rs","byte_start":89800,"byte_end":89809,"line_start":93,"line_end":93,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":333},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\surface.rs","byte_start":89899,"byte_end":89905,"line_start":99,"line_end":99,"column_start":12,"column_end":18},"name":"height","qualname":"<SurfaceDesc>::height","value":"pub fn height(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\surface.rs","byte_start":89878,"byte_end":89887,"line_start":98,"line_end":98,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":334},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\surface.rs","byte_start":89979,"byte_end":89985,"line_start":104,"line_end":104,"column_start":12,"column_end":18},"name":"format","qualname":"<SurfaceDesc>::format","value":"pub fn format(&Self) -> DXGI_FORMAT","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\surface.rs","byte_start":89958,"byte_end":89967,"line_start":103,"line_end":103,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":335},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\surface.rs","byte_start":90067,"byte_end":90079,"line_start":109,"line_end":109,"column_start":12,"column_end":24},"name":"sample_count","qualname":"<SurfaceDesc>::sample_count","value":"pub fn sample_count(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\surface.rs","byte_start":90046,"byte_end":90055,"line_start":108,"line_end":108,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":336},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\surface.rs","byte_start":90163,"byte_end":90177,"line_start":114,"line_end":114,"column_start":12,"column_end":26},"name":"sample_quality","qualname":"<SurfaceDesc>::sample_quality","value":"pub fn sample_quality(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\surface.rs","byte_start":90142,"byte_end":90151,"line_start":113,"line_end":113,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":337},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\surface.rs","byte_start":90251,"byte_end":90261,"line_start":119,"line_end":119,"column_start":12,"column_end":22},"name":"SurfaceMap","qualname":"::surface::SurfaceMap","value":"SurfaceMap { desc }","parent":null,"children":[{"krate":0,"index":339},{"krate":0,"index":340},{"krate":0,"index":341},{"krate":0,"index":342}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":339},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\surface.rs","byte_start":90276,"byte_end":90280,"line_start":120,"line_end":120,"column_start":9,"column_end":13},"name":"desc","qualname":"::surface::SurfaceMap::desc","value":"surface::SurfaceDesc","parent":{"krate":0,"index":337},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":345},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\surface.rs","byte_start":90436,"byte_end":90439,"line_start":128,"line_end":128,"column_start":19,"column_end":22},"name":"row","qualname":"<SurfaceMap>::row","value":"pub unsafe fn row<T>(&Self, u32) -> &[T] where T: Copy","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\surface.rs","byte_start":90408,"byte_end":90417,"line_start":127,"line_end":127,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":347},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\surface.rs","byte_start":90814,"byte_end":90821,"line_start":139,"line_end":139,"column_start":19,"column_end":26},"name":"row_mut","qualname":"<SurfaceMap>::row_mut","value":"pub unsafe fn row_mut<T>(&mut Self, u32) -> &mut [T] where T: Copy","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\surface.rs","byte_start":90786,"byte_end":90795,"line_start":138,"line_end":138,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":352},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"swap_chain","qualname":"::swap_chain","value":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","parent":null,"children":[{"krate":0,"index":353},{"krate":0,"index":354},{"krate":0,"index":1610},{"krate":0,"index":355},{"krate":0,"index":356},{"krate":0,"index":357},{"krate":0,"index":358},{"krate":0,"index":359},{"krate":0,"index":360},{"krate":0,"index":361},{"krate":0,"index":362},{"krate":0,"index":1624},{"krate":0,"index":363},{"krate":0,"index":364},{"krate":0,"index":1628},{"krate":0,"index":365},{"krate":0,"index":366},{"krate":0,"index":1632},{"krate":0,"index":367},{"krate":0,"index":368},{"krate":0,"index":369},{"krate":0,"index":370},{"krate":0,"index":371},{"krate":0,"index":372},{"krate":0,"index":373},{"krate":0,"index":374},{"krate":0,"index":375},{"krate":0,"index":376},{"krate":0,"index":377},{"krate":0,"index":378},{"krate":0,"index":379},{"krate":0,"index":380},{"krate":0,"index":381},{"krate":0,"index":382},{"krate":0,"index":383},{"krate":0,"index":384},{"krate":0,"index":385},{"krate":0,"index":386},{"krate":0,"index":387},{"krate":0,"index":388},{"krate":0,"index":389},{"krate":0,"index":1326},{"krate":0,"index":1332},{"krate":0,"index":1328},{"krate":0,"index":1329},{"krate":0,"index":390},{"krate":0,"index":420},{"krate":0,"index":421},{"krate":0,"index":422},{"krate":0,"index":425},{"krate":0,"index":427},{"krate":0,"index":1334},{"krate":0,"index":1338},{"krate":0,"index":1336},{"krate":0,"index":440},{"krate":0,"index":445},{"krate":0,"index":453},{"krate":0,"index":462},{"krate":0,"index":470},{"krate":0,"index":478},{"krate":0,"index":479},{"krate":0,"index":1339}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1326},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":92150,"byte_end":92159,"line_start":25,"line_end":25,"column_start":12,"column_end":21},"name":"SwapChain","qualname":"::swap_chain::SwapChain","value":"SwapChain {  }","parent":null,"children":[{"krate":0,"index":1327}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":391},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":92241,"byte_end":92252,"line_start":31,"line_end":31,"column_start":12,"column_end":23},"name":"create_hwnd","qualname":"<SwapChain>::create_hwnd","value":"pub fn create_hwnd<'a>(&'a Factory, &'a Device) -> SwapChainHwndBuilder","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":92220,"byte_end":92229,"line_start":30,"line_end":30,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":393},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":92415,"byte_end":92422,"line_start":36,"line_end":36,"column_start":12,"column_end":19},"name":"present","qualname":"<SwapChain>::present","value":"pub fn present(&Self, u32, PresentFlags) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":92394,"byte_end":92403,"line_start":35,"line_end":35,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":394},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":92647,"byte_end":92657,"line_start":44,"line_end":44,"column_start":12,"column_end":22},"name":"get_buffer","qualname":"<SwapChain>::get_buffer","value":"pub fn get_buffer<B>(&Self, u32) -> Result<B, Error> where\nB: BackbufferTexture","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":92626,"byte_end":92635,"line_start":43,"line_end":43,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":397},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":93002,"byte_end":93022,"line_start":57,"line_end":57,"column_start":12,"column_end":32},"name":"get_fullscreen_state","qualname":"<SwapChain>::get_fullscreen_state","value":"pub fn get_fullscreen_state(&Self) -> Result<Option<Output>, Error>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":92981,"byte_end":92990,"line_start":56,"line_end":56,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":400},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":93381,"byte_end":93389,"line_start":69,"line_end":69,"column_start":12,"column_end":20},"name":"get_desc","qualname":"<SwapChain>::get_desc","value":"pub fn get_desc(&Self) -> SwapChainDesc","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":93360,"byte_end":93369,"line_start":68,"line_end":68,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":401},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":93645,"byte_end":93664,"line_start":79,"line_end":79,"column_start":12,"column_end":31},"name":"get_fullscreen_desc","qualname":"<SwapChain>::get_fullscreen_desc","value":"pub fn get_fullscreen_desc(&Self) -> FullscreenDesc","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":93624,"byte_end":93633,"line_start":78,"line_end":78,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":402},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":93928,"byte_end":93936,"line_start":89,"line_end":89,"column_start":12,"column_end":20},"name":"get_hwnd","qualname":"<SwapChain>::get_hwnd","value":"pub fn get_hwnd(&Self) -> Option<HWND>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":93907,"byte_end":93916,"line_start":88,"line_end":88,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":403},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":94151,"byte_end":94173,"line_start":98,"line_end":98,"column_start":12,"column_end":34},"name":"get_restrict_to_output","qualname":"<SwapChain>::get_restrict_to_output","value":"pub fn get_restrict_to_output(&Self) -> Option<Output>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":94130,"byte_end":94139,"line_start":97,"line_end":97,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":405},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":94425,"byte_end":94446,"line_start":107,"line_end":107,"column_start":12,"column_end":33},"name":"get_containing_output","qualname":"<SwapChain>::get_containing_output","value":"pub fn get_containing_output(&Self) -> Option<Output>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":94404,"byte_end":94413,"line_start":106,"line_end":106,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":407},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":94698,"byte_end":94718,"line_start":116,"line_end":116,"column_start":12,"column_end":32},"name":"get_frame_statistics","qualname":"<SwapChain>::get_frame_statistics","value":"pub fn get_frame_statistics(&Self) -> Result<FrameStatistics, Error>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":94677,"byte_end":94686,"line_start":115,"line_end":115,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":408},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":94980,"byte_end":95002,"line_start":125,"line_end":125,"column_start":12,"column_end":34},"name":"get_last_present_count","qualname":"<SwapChain>::get_last_present_count","value":"pub fn get_last_present_count(&Self) -> Option<u32>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":94959,"byte_end":94968,"line_start":124,"line_end":124,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":409},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":95217,"byte_end":95237,"line_start":134,"line_end":134,"column_start":12,"column_end":32},"name":"get_background_color","qualname":"<SwapChain>::get_background_color","value":"pub fn get_background_color(&Self) -> Option<Rgba>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":95196,"byte_end":95205,"line_start":133,"line_end":133,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":411},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":95519,"byte_end":95531,"line_start":143,"line_end":143,"column_start":12,"column_end":24},"name":"get_rotation","qualname":"<SwapChain>::get_rotation","value":"pub fn get_rotation(&Self) -> Result<ModeRotation, Error>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":95498,"byte_end":95507,"line_start":142,"line_end":142,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":412},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":95833,"byte_end":95853,"line_start":153,"line_end":153,"column_start":12,"column_end":32},"name":"set_background_color","qualname":"<SwapChain>::set_background_color","value":"pub fn set_background_color(&Self, &Rgba) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":95812,"byte_end":95821,"line_start":152,"line_end":152,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":413},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":96063,"byte_end":96075,"line_start":161,"line_end":161,"column_start":12,"column_end":24},"name":"set_rotation","qualname":"<SwapChain>::set_rotation","value":"pub fn set_rotation(&Self, ModeRotation) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":96042,"byte_end":96051,"line_start":160,"line_end":160,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":414},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":96270,"byte_end":96290,"line_start":169,"line_end":169,"column_start":12,"column_end":32},"name":"set_fullscreen_state","qualname":"<SwapChain>::set_fullscreen_state","value":"pub fn set_fullscreen_state(&Self, bool, Option<&Output>) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":96249,"byte_end":96258,"line_start":168,"line_end":168,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":416},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":96713,"byte_end":96727,"line_start":186,"line_end":186,"column_start":12,"column_end":26},"name":"resize_buffers","qualname":"<SwapChain>::resize_buffers","value":"pub fn resize_buffers(&Self) -> ResizeBuffers","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":96692,"byte_end":96701,"line_start":185,"line_end":185,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":417},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":97067,"byte_end":97080,"line_start":199,"line_end":199,"column_start":12,"column_end":25},"name":"resize_target","qualname":"<SwapChain>::resize_target","value":"pub fn resize_target(&Self, &Mode) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":97046,"byte_end":97055,"line_start":198,"line_end":198,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":418},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":97277,"byte_end":97285,"line_start":207,"line_end":207,"column_start":19,"column_end":27},"name":"from_raw","qualname":"<SwapChain>::from_raw","value":"pub unsafe fn from_raw(*mut IDXGISwapChain1) -> SwapChain","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":97249,"byte_end":97258,"line_start":206,"line_end":206,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":419},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":97437,"byte_end":97444,"line_start":214,"line_end":214,"column_start":19,"column_end":26},"name":"get_raw","qualname":"<SwapChain>::get_raw","value":"pub unsafe fn get_raw(&Self) -> *mut IDXGISwapChain1","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":97409,"byte_end":97418,"line_start":213,"line_end":213,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":422},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":97656,"byte_end":97673,"line_start":223,"line_end":223,"column_start":18,"column_end":35},"name":"BackbufferTexture","qualname":"::swap_chain::BackbufferTexture","value":"BackbufferTexture","parent":null,"children":[{"krate":0,"index":423},{"krate":0,"index":424}],"decl_id":null,"docs":" This should be implemented for e.g. d3d11::Texture2d\n","sig":null,"attributes":[{"value":"/ This should be implemented for e.g. d3d11::Texture2d","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":97582,"byte_end":97638,"line_start":222,"line_end":222,"column_start":1,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":423},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":97683,"byte_end":97689,"line_start":224,"line_end":224,"column_start":8,"column_end":14},"name":"uuidof","qualname":"::swap_chain::BackbufferTexture::uuidof","value":"pub fn uuidof() -> GUID","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":424},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":97715,"byte_end":97723,"line_start":225,"line_end":225,"column_start":15,"column_end":23},"name":"from_raw","qualname":"::swap_chain::BackbufferTexture::from_raw","value":"pub unsafe fn from_raw(*mut c_void) -> Self","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":425},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":97765,"byte_end":97778,"line_start":228,"line_end":228,"column_start":12,"column_end":25},"name":"SwapChainDesc","qualname":"::swap_chain::SwapChainDesc","value":"SwapChainDesc {  }","parent":null,"children":[{"krate":0,"index":426}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":428},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":97863,"byte_end":97868,"line_start":234,"line_end":234,"column_start":12,"column_end":17},"name":"width","qualname":"<SwapChainDesc>::width","value":"pub fn width(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":97842,"byte_end":97851,"line_start":233,"line_end":233,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":429},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":97941,"byte_end":97947,"line_start":239,"line_end":239,"column_start":12,"column_end":18},"name":"height","qualname":"<SwapChainDesc>::height","value":"pub fn height(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":97920,"byte_end":97929,"line_start":238,"line_end":238,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":430},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":98021,"byte_end":98027,"line_start":244,"line_end":244,"column_start":12,"column_end":18},"name":"format","qualname":"<SwapChainDesc>::format","value":"pub fn format(&Self) -> Format","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":98000,"byte_end":98009,"line_start":243,"line_end":243,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":431},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":98149,"byte_end":98155,"line_start":249,"line_end":249,"column_start":12,"column_end":18},"name":"stereo","qualname":"<SwapChainDesc>::stereo","value":"pub fn stereo(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":98128,"byte_end":98137,"line_start":248,"line_end":248,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":432},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":98235,"byte_end":98247,"line_start":254,"line_end":254,"column_start":12,"column_end":24},"name":"sample_count","qualname":"<SwapChainDesc>::sample_count","value":"pub fn sample_count(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":98214,"byte_end":98223,"line_start":253,"line_end":253,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":433},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":98331,"byte_end":98345,"line_start":259,"line_end":259,"column_start":12,"column_end":26},"name":"sample_quality","qualname":"<SwapChainDesc>::sample_quality","value":"pub fn sample_quality(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":98310,"byte_end":98319,"line_start":258,"line_end":258,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":434},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":98431,"byte_end":98443,"line_start":264,"line_end":264,"column_start":12,"column_end":24},"name":"buffer_usage","qualname":"<SwapChainDesc>::buffer_usage","value":"pub fn buffer_usage(&Self) -> UsageFlags","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":98410,"byte_end":98419,"line_start":263,"line_end":263,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":435},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":98541,"byte_end":98553,"line_start":269,"line_end":269,"column_start":12,"column_end":24},"name":"buffer_count","qualname":"<SwapChainDesc>::buffer_count","value":"pub fn buffer_count(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":98520,"byte_end":98529,"line_start":268,"line_end":268,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":436},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":98632,"byte_end":98639,"line_start":274,"line_end":274,"column_start":12,"column_end":19},"name":"scaling","qualname":"<SwapChainDesc>::scaling","value":"pub fn scaling(&Self) -> Scaling","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":98611,"byte_end":98620,"line_start":273,"line_end":273,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":437},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":98765,"byte_end":98776,"line_start":279,"line_end":279,"column_start":12,"column_end":23},"name":"swap_effect","qualname":"<SwapChainDesc>::swap_effect","value":"pub fn swap_effect(&Self) -> SwapEffect","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":98744,"byte_end":98753,"line_start":278,"line_end":278,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":438},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":98914,"byte_end":98924,"line_start":284,"line_end":284,"column_start":12,"column_end":22},"name":"alpha_mode","qualname":"<SwapChainDesc>::alpha_mode","value":"pub fn alpha_mode(&Self) -> AlphaMode","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":98893,"byte_end":98902,"line_start":283,"line_end":283,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":439},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":99062,"byte_end":99067,"line_start":289,"line_end":289,"column_start":12,"column_end":17},"name":"flags","qualname":"<SwapChainDesc>::flags","value":"pub fn flags(&Self) -> SwapChainFlags","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":99041,"byte_end":99050,"line_start":288,"line_end":288,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1334},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":99178,"byte_end":99192,"line_start":295,"line_end":295,"column_start":12,"column_end":26},"name":"FullscreenDesc","qualname":"::swap_chain::FullscreenDesc","value":"FullscreenDesc {  }","parent":null,"children":[{"krate":0,"index":1335}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":441},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":99288,"byte_end":99300,"line_start":301,"line_end":301,"column_start":12,"column_end":24},"name":"refresh_rate","qualname":"<FullscreenDesc>::refresh_rate","value":"pub fn refresh_rate(&Self) -> Ratio<u32>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":99267,"byte_end":99276,"line_start":300,"line_end":300,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":442},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":99478,"byte_end":99495,"line_start":309,"line_end":309,"column_start":12,"column_end":29},"name":"scanline_ordering","qualname":"<FullscreenDesc>::scanline_ordering","value":"pub fn scanline_ordering(&Self) -> ModeScanlineOrder","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":99457,"byte_end":99466,"line_start":308,"line_end":308,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":443},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":99677,"byte_end":99684,"line_start":315,"line_end":315,"column_start":12,"column_end":19},"name":"scaling","qualname":"<FullscreenDesc>::scaling","value":"pub fn scaling(&Self) -> ModeScaling","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":99656,"byte_end":99665,"line_start":314,"line_end":314,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":444},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":99826,"byte_end":99834,"line_start":320,"line_end":320,"column_start":12,"column_end":20},"name":"windowed","qualname":"<FullscreenDesc>::windowed","value":"pub fn windowed(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":99805,"byte_end":99814,"line_start":319,"line_end":319,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":445},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":99916,"byte_end":99929,"line_start":326,"line_end":326,"column_start":12,"column_end":25},"name":"ResizeBuffers","qualname":"::swap_chain::ResizeBuffers","value":"ResizeBuffers {  }","parent":null,"children":[{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":449},{"krate":0,"index":450},{"krate":0,"index":451},{"krate":0,"index":452}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":99893,"byte_end":99904,"line_start":325,"line_end":325,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":455},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":100126,"byte_end":100132,"line_start":337,"line_end":337,"column_start":12,"column_end":18},"name":"finish","qualname":"<ResizeBuffers>::finish","value":"pub fn finish(Self) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":100105,"byte_end":100114,"line_start":336,"line_end":336,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":456},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":100471,"byte_end":100481,"line_start":352,"line_end":352,"column_start":12,"column_end":22},"name":"dimensions","qualname":"<ResizeBuffers>::dimensions","value":"pub fn dimensions(Self, u32, u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":100450,"byte_end":100459,"line_start":351,"line_end":351,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":457},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":100630,"byte_end":100636,"line_start":359,"line_end":359,"column_start":12,"column_end":18},"name":"format","qualname":"<ResizeBuffers>::format","value":"pub fn format(Self, Format) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":100609,"byte_end":100618,"line_start":358,"line_end":358,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":458},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":100748,"byte_end":100760,"line_start":365,"line_end":365,"column_start":12,"column_end":24},"name":"buffer_count","qualname":"<ResizeBuffers>::buffer_count","value":"pub fn buffer_count(Self, u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":100727,"byte_end":100736,"line_start":364,"line_end":364,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":459},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":100866,"byte_end":100871,"line_start":371,"line_end":371,"column_start":12,"column_end":17},"name":"flags","qualname":"<ResizeBuffers>::flags","value":"pub fn flags(Self, SwapChainFlags) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":100845,"byte_end":100854,"line_start":370,"line_end":370,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":460},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":100988,"byte_end":101000,"line_start":377,"line_end":377,"column_start":12,"column_end":24},"name":"modify_flags","qualname":"<ResizeBuffers>::modify_flags","value":"pub fn modify_flags<F>(Self, F) -> Self where F: FnOnce(SwapChainFlags) ->\nSwapChainFlags","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":100967,"byte_end":100976,"line_start":376,"line_end":376,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":462},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":101184,"byte_end":101204,"line_start":387,"line_end":387,"column_start":12,"column_end":32},"name":"SwapChainHwndBuilder","qualname":"::swap_chain::SwapChainHwndBuilder","value":"SwapChainHwndBuilder {  }","parent":null,"children":[{"krate":0,"index":464},{"krate":0,"index":465},{"krate":0,"index":466},{"krate":0,"index":467},{"krate":0,"index":468},{"krate":0,"index":469}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":101161,"byte_end":101172,"line_start":386,"line_end":386,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":473},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":101767,"byte_end":101772,"line_start":410,"line_end":410,"column_start":12,"column_end":17},"name":"build","qualname":"<SwapChainHwndBuilder>::build","value":"pub fn build(Self) -> Result<SwapChain, Error>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":101746,"byte_end":101755,"line_start":409,"line_end":409,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":476},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":102434,"byte_end":102438,"line_start":432,"line_end":432,"column_start":12,"column_end":16},"name":"hwnd","qualname":"<SwapChainHwndBuilder>::hwnd","value":"pub fn hwnd(Self, HWND) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Required\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":102396,"byte_end":102405,"line_start":430,"line_end":430,"column_start":5,"column_end":14}},{"value":"/ Required","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":102410,"byte_end":102422,"line_start":431,"line_end":431,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":477},"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":102559,"byte_end":102574,"line_start":439,"line_end":439,"column_start":12,"column_end":27},"name":"restrict_output","qualname":"<SwapChainHwndBuilder>::restrict_output","value":"pub fn restrict_output(Self, &'a Output) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Optional\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":102521,"byte_end":102530,"line_start":437,"line_end":437,"column_start":5,"column_end":14}},{"value":"/ Optional","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":102535,"byte_end":102547,"line_start":438,"line_end":438,"column_start":5,"column_end":17}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\adapter.rs","byte_start":1071,"byte_end":1078,"line_start":23,"line_end":23,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\adapter.rs","byte_start":2182,"byte_end":2189,"line_start":69,"line_end":69,"column_start":22,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\adapter.rs","byte_start":2214,"byte_end":2221,"line_start":70,"line_end":70,"column_start":22,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\adapter.rs","byte_start":2246,"byte_end":2253,"line_start":72,"line_end":72,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":54}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\adapter.rs","byte_start":2515,"byte_end":2526,"line_start":85,"line_end":85,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":56},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\adapter.rs","byte_start":3710,"byte_end":3721,"line_start":143,"line_end":143,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":68}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\adapter.rs","byte_start":4634,"byte_end":4644,"line_start":168,"line_end":168,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":71},{"krate":0,"index":72}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\device.rs","byte_start":5464,"byte_end":5470,"line_start":15,"line_end":15,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":83},{"krate":0,"index":85},{"krate":0,"index":86}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\device.rs","byte_start":6175,"byte_end":6181,"line_start":41,"line_end":41,"column_start":22,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\device.rs","byte_start":6206,"byte_end":6212,"line_start":42,"line_end":42,"column_start":22,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\error.rs","byte_start":6738,"byte_end":6743,"line_start":15,"line_end":15,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":111},{"krate":0,"index":113},{"krate":0,"index":116},{"krate":0,"index":117}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\error.rs","byte_start":7397,"byte_end":7402,"line_start":45,"line_end":45,"column_start":24,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":119}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\error.rs","byte_start":7502,"byte_end":7507,"line_start":52,"line_end":52,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":121}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\error.rs","byte_start":7725,"byte_end":7730,"line_start":61,"line_end":61,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":123}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\factory.rs","byte_start":9083,"byte_end":9090,"line_start":21,"line_end":21,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":146},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":154},{"krate":0,"index":155}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\factory.rs","byte_start":10894,"byte_end":10901,"line_start":87,"line_end":87,"column_start":22,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\factory.rs","byte_start":10926,"byte_end":10933,"line_start":88,"line_end":88,"column_start":22,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\factory.rs","byte_start":11065,"byte_end":11076,"line_start":96,"line_end":96,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":160},{"krate":0,"index":161}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":69101,"byte_end":69107,"line_start":1086,"line_end":1086,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":178}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":75878,"byte_end":75884,"line_start":30,"line_end":30,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":230},{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":236},{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":241}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":80046,"byte_end":80052,"line_start":172,"line_end":172,"column_start":22,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":80077,"byte_end":80083,"line_start":173,"line_end":173,"column_start":22,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":80171,"byte_end":80181,"line_start":180,"line_end":180,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":245},{"krate":0,"index":247},{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":250}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":80987,"byte_end":80991,"line_start":219,"line_end":219,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":252},{"krate":0,"index":253},{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":265}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":83020,"byte_end":83024,"line_start":307,"line_end":307,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":267}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":83560,"byte_end":83576,"line_start":325,"line_end":325,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":272}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":84150,"byte_end":84166,"line_start":348,"line_end":348,"column_start":21,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":274}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":84746,"byte_end":84758,"line_start":367,"line_end":367,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":281},{"krate":0,"index":283}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":85622,"byte_end":85625,"line_start":410,"line_end":410,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":286},{"krate":0,"index":287},{"krate":0,"index":288},{"krate":0,"index":289},{"krate":0,"index":290},{"krate":0,"index":291},{"krate":0,"index":292}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":86395,"byte_end":86399,"line_start":458,"line_end":458,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":87117,"byte_end":87132,"line_start":502,"line_end":502,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":306}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\surface.rs","byte_start":88033,"byte_end":88040,"line_start":17,"line_end":17,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":320},{"krate":0,"index":321},{"krate":0,"index":327},{"krate":0,"index":328}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\surface.rs","byte_start":89653,"byte_end":89660,"line_start":84,"line_end":84,"column_start":22,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\surface.rs","byte_start":89685,"byte_end":89692,"line_start":85,"line_end":85,"column_start":22,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\surface.rs","byte_start":89782,"byte_end":89793,"line_start":92,"line_end":92,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":332},{"krate":0,"index":333},{"krate":0,"index":334},{"krate":0,"index":335},{"krate":0,"index":336}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\surface.rs","byte_start":90387,"byte_end":90397,"line_start":126,"line_end":126,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":345},{"krate":0,"index":347}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\surface.rs","byte_start":91196,"byte_end":91206,"line_start":150,"line_end":150,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":351}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":92204,"byte_end":92213,"line_start":29,"line_end":29,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":391},{"krate":0,"index":393},{"krate":0,"index":394},{"krate":0,"index":397},{"krate":0,"index":400},{"krate":0,"index":401},{"krate":0,"index":402},{"krate":0,"index":403},{"krate":0,"index":405},{"krate":0,"index":407},{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":411},{"krate":0,"index":412},{"krate":0,"index":413},{"krate":0,"index":414},{"krate":0,"index":416},{"krate":0,"index":417},{"krate":0,"index":418},{"krate":0,"index":419}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":97534,"byte_end":97543,"line_start":219,"line_end":219,"column_start":22,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":97568,"byte_end":97577,"line_start":220,"line_end":220,"column_start":22,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":97822,"byte_end":97835,"line_start":232,"line_end":232,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":428},{"krate":0,"index":429},{"krate":0,"index":430},{"krate":0,"index":431},{"krate":0,"index":432},{"krate":0,"index":433},{"krate":0,"index":434},{"krate":0,"index":435},{"krate":0,"index":436},{"krate":0,"index":437},{"krate":0,"index":438},{"krate":0,"index":439}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":99246,"byte_end":99260,"line_start":299,"line_end":299,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":441},{"krate":0,"index":442},{"krate":0,"index":443},{"krate":0,"index":444}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":100081,"byte_end":100094,"line_start":335,"line_end":335,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":455},{"krate":0,"index":456},{"krate":0,"index":457},{"krate":0,"index":458},{"krate":0,"index":459},{"krate":0,"index":460}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":101406,"byte_end":101426,"line_start":396,"line_end":396,"column_start":10,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":472},{"krate":0,"index":473},{"krate":0,"index":476},{"krate":0,"index":477}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\lib.rs","byte_start":450,"byte_end":457,"line_start":18,"line_end":18,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":25}},{"kind":"Mod","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\lib.rs","byte_start":467,"byte_end":473,"line_start":19,"line_end":19,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":73}},{"kind":"Mod","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\lib.rs","byte_start":483,"byte_end":488,"line_start":20,"line_end":20,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":89}},{"kind":"Mod","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\lib.rs","byte_start":498,"byte_end":505,"line_start":21,"line_end":21,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":125}},{"kind":"Mod","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\lib.rs","byte_start":515,"byte_end":520,"line_start":22,"line_end":22,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":162}},{"kind":"Mod","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\mod.rs","byte_start":15720,"byte_end":15730,"line_start":134,"line_end":134,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":175}},{"kind":"Mod","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\mod.rs","byte_start":15740,"byte_end":15746,"line_start":135,"line_end":135,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":176}},{"kind":"Mod","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\mod.rs","byte_start":15756,"byte_end":15769,"line_start":136,"line_end":136,"column_start":9,"column_end":22},"ref_id":{"krate":0,"index":180}},{"kind":"Mod","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\mod.rs","byte_start":15779,"byte_end":15791,"line_start":137,"line_end":137,"column_start":9,"column_end":21},"ref_id":{"krate":0,"index":181}},{"kind":"Mod","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\mod.rs","byte_start":15801,"byte_end":15820,"line_start":138,"line_end":138,"column_start":9,"column_end":28},"ref_id":{"krate":0,"index":182}},{"kind":"Mod","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\mod.rs","byte_start":15830,"byte_end":15837,"line_start":139,"line_end":139,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":183}},{"kind":"Mod","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\mod.rs","byte_start":15847,"byte_end":15854,"line_start":140,"line_end":140,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":184}},{"kind":"Mod","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\mod.rs","byte_start":15864,"byte_end":15874,"line_start":141,"line_end":141,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":185}},{"kind":"Mod","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\mod.rs","byte_start":15884,"byte_end":15895,"line_start":142,"line_end":142,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":186}},{"kind":"Mod","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\mod.rs","byte_start":15905,"byte_end":15910,"line_start":143,"line_end":143,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":187}},{"kind":"Mod","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\lib.rs","byte_start":530,"byte_end":536,"line_start":23,"line_end":23,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":188}},{"kind":"Mod","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\lib.rs","byte_start":546,"byte_end":553,"line_start":24,"line_end":24,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":307}},{"kind":"Mod","span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\lib.rs","byte_start":563,"byte_end":573,"line_start":25,"line_end":25,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":352}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\adapter.rs","byte_start":1071,"byte_end":1078,"line_start":23,"line_end":23,"column_start":6,"column_end":13},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":481},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\adapter.rs","byte_start":2182,"byte_end":2189,"line_start":69,"line_end":69,"column_start":22,"column_end":29},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":481},"to":{"krate":2,"index":1971}},{"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\adapter.rs","byte_start":2214,"byte_end":2221,"line_start":70,"line_end":70,"column_start":22,"column_end":29},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":481},"to":{"krate":2,"index":1983}},{"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\adapter.rs","byte_start":2246,"byte_end":2253,"line_start":72,"line_end":72,"column_start":21,"column_end":28},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":481},"to":{"krate":2,"index":6322}},{"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\adapter.rs","byte_start":2515,"byte_end":2526,"line_start":85,"line_end":85,"column_start":6,"column_end":17},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":489},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\adapter.rs","byte_start":3710,"byte_end":3721,"line_start":143,"line_end":143,"column_start":21,"column_end":32},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":489},"to":{"krate":2,"index":6322}},{"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\adapter.rs","byte_start":4634,"byte_end":4644,"line_start":168,"line_end":168,"column_start":23,"column_end":33},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":494},"to":{"krate":2,"index":5047}},{"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\device.rs","byte_start":5464,"byte_end":5470,"line_start":15,"line_end":15,"column_start":6,"column_end":12},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":503},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\device.rs","byte_start":6175,"byte_end":6181,"line_start":41,"line_end":41,"column_start":22,"column_end":28},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":503},"to":{"krate":2,"index":1971}},{"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\device.rs","byte_start":6206,"byte_end":6212,"line_start":42,"line_end":42,"column_start":22,"column_end":28},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":503},"to":{"krate":2,"index":1983}},{"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\error.rs","byte_start":6738,"byte_end":6743,"line_start":15,"line_end":15,"column_start":6,"column_end":11},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":511},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\error.rs","byte_start":7397,"byte_end":7402,"line_start":45,"line_end":45,"column_start":24,"column_end":29},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":511},"to":{"krate":2,"index":1889}},{"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\error.rs","byte_start":7502,"byte_end":7507,"line_start":52,"line_end":52,"column_start":21,"column_end":26},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":511},"to":{"krate":2,"index":6322}},{"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\error.rs","byte_start":7725,"byte_end":7730,"line_start":61,"line_end":61,"column_start":23,"column_end":28},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":511},"to":{"krate":2,"index":6327}},{"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\factory.rs","byte_start":9083,"byte_end":9090,"line_start":21,"line_end":21,"column_start":6,"column_end":13},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":527},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\factory.rs","byte_start":10894,"byte_end":10901,"line_start":87,"line_end":87,"column_start":22,"column_end":29},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":527},"to":{"krate":2,"index":1971}},{"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\factory.rs","byte_start":10926,"byte_end":10933,"line_start":88,"line_end":88,"column_start":22,"column_end":29},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":527},"to":{"krate":2,"index":1983}},{"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\factory.rs","byte_start":11065,"byte_end":11076,"line_start":96,"line_end":96,"column_start":23,"column_end":34},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":535},"to":{"krate":2,"index":5047}},{"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\flags\\format.rs","byte_start":69101,"byte_end":69107,"line_start":1086,"line_end":1086,"column_start":6,"column_end":12},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":579},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":75878,"byte_end":75884,"line_start":30,"line_end":30,"column_start":6,"column_end":12},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":1270},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":80046,"byte_end":80052,"line_start":172,"line_end":172,"column_start":22,"column_end":28},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":1270},"to":{"krate":2,"index":1971}},{"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":80077,"byte_end":80083,"line_start":173,"line_end":173,"column_start":22,"column_end":28},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1270},"to":{"krate":2,"index":1983}},{"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":80171,"byte_end":80181,"line_start":180,"line_end":180,"column_start":6,"column_end":16},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1278},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":80987,"byte_end":80991,"line_start":219,"line_end":219,"column_start":6,"column_end":10},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1283},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":83020,"byte_end":83024,"line_start":307,"line_end":307,"column_start":21,"column_end":25},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":1283},"to":{"krate":2,"index":6322}},{"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":83560,"byte_end":83576,"line_start":325,"line_end":325,"column_start":6,"column_end":22},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":1288},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":84150,"byte_end":84166,"line_start":348,"line_end":348,"column_start":21,"column_end":37},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":1288},"to":{"krate":2,"index":6322}},{"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":84746,"byte_end":84758,"line_start":367,"line_end":367,"column_start":6,"column_end":18},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":1293},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":85622,"byte_end":85625,"line_start":410,"line_end":410,"column_start":6,"column_end":9},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1298},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":86395,"byte_end":86399,"line_start":458,"line_end":458,"column_start":6,"column_end":10},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1303},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\output.rs","byte_start":87117,"byte_end":87132,"line_start":502,"line_end":502,"column_start":6,"column_end":21},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1308},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\surface.rs","byte_start":88033,"byte_end":88040,"line_start":17,"line_end":17,"column_start":6,"column_end":13},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1313},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\surface.rs","byte_start":89653,"byte_end":89660,"line_start":84,"line_end":84,"column_start":22,"column_end":29},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1313},"to":{"krate":2,"index":1971}},{"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\surface.rs","byte_start":89685,"byte_end":89692,"line_start":85,"line_end":85,"column_start":22,"column_end":29},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1313},"to":{"krate":2,"index":1983}},{"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\surface.rs","byte_start":89782,"byte_end":89793,"line_start":92,"line_end":92,"column_start":6,"column_end":17},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1321},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\surface.rs","byte_start":90387,"byte_end":90397,"line_start":126,"line_end":126,"column_start":10,"column_end":20},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":337},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\surface.rs","byte_start":91196,"byte_end":91206,"line_start":150,"line_end":150,"column_start":19,"column_end":29},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":337},"to":{"krate":2,"index":2166}},{"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":92204,"byte_end":92213,"line_start":29,"line_end":29,"column_start":6,"column_end":15},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1326},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":97534,"byte_end":97543,"line_start":219,"line_end":219,"column_start":22,"column_end":31},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1326},"to":{"krate":2,"index":1971}},{"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":97568,"byte_end":97577,"line_start":220,"line_end":220,"column_start":22,"column_end":31},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1326},"to":{"krate":2,"index":1983}},{"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":97822,"byte_end":97835,"line_start":232,"line_end":232,"column_start":6,"column_end":19},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":425},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":99246,"byte_end":99260,"line_start":299,"line_end":299,"column_start":6,"column_end":20},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1334},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":100081,"byte_end":100094,"line_start":335,"line_end":335,"column_start":10,"column_end":23},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":445},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\falik\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dxgi-0.1.7\\src\\swap_chain.rs","byte_start":101406,"byte_end":101426,"line_start":396,"line_end":396,"column_start":10,"column_end":30},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":462},"to":{"krate":4294967295,"index":4294967295}}]}